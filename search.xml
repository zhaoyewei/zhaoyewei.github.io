<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>380.时间插入、删除和获取随机元素</title>
      <link href="/2021/09/15/380-%E6%97%B6%E9%97%B4%E6%8F%92%E5%85%A5%E3%80%81%E5%88%A0%E9%99%A4%E5%92%8C%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E5%85%83%E7%B4%A0/"/>
      <url>/2021/09/15/380-%E6%97%B6%E9%97%B4%E6%8F%92%E5%85%A5%E3%80%81%E5%88%A0%E9%99%A4%E5%92%8C%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>实现<code>RandomizedSet</code> 类：</p><ul><li><code>RandomizedSet()</code> 初始化 <code>RandomizedSet</code> 对象</li><li><code>bool insert(int val)</code> 当元素 <code>val</code> 不存在时，向集合中插入该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li><li><code>bool remove(int val)</code> 当元素 <code>val</code> 存在时，从集合中移除该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li><li><code>int getRandom()</code> 随机返回现有集合中的一项（测试用例保证调用此方法时集合中至少存在一个元素）。每个元素应该有 <strong>相同的概率</strong> 被返回。</li></ul><p>你必须实现类的所有函数，并满足每个函数的 <strong>平均</strong> 时间复杂度为 <code>O(1)</code> 。</p><p><strong>示例：</strong></p><p><strong>输入</strong><br>[“RandomizedSet”, “insert”, “remove”, “insert”, “getRandom”, “remove”, “insert”, “getRandom”]<br>[[], [1], [2], [2], [], [1], [2], []]<br><strong>输出</strong><br>[null, true, false, true, 2, true, false, 2]</p><p><strong>解释</strong><br>RandomizedSet randomizedSet = new RandomizedSet();<br>randomizedSet.insert(1); // 向集合中插入 1 。返回 true 表示 1 被成功地插入。<br>randomizedSet.remove(2); // 返回 false ，表示集合中不存在 2 。<br>randomizedSet.insert(2); // 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。<br>randomizedSet.getRandom(); // getRandom 应随机返回 1 或 2 。<br>randomizedSet.remove(1); // 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。<br>randomizedSet.insert(2); // 2 已在集合中，所以返回 false 。<br>randomizedSet.getRandom(); // 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。</p><p><strong>提示：</strong></p><ul><li><code>-231 &lt;= val &lt;= 231 - 1</code></li><li>最多调用 <code>insert</code>、<code>remove</code> 和 <code>getRandom</code> 函数 <code>2 * ``105</code> 次</li><li>在调用 <code>getRandom</code> 方法时，数据结构中 <strong>至少存在一个</strong> 元素。<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1>一个vector保存所有的key。一个map保存key和在vector中对应的下标。<br>插入：在vector中加入该值，在map中加入&lt;该值，下标&gt;<br>随机获得：生成随机数在vector中获取一个。<br>删除：<br>vector最后一个元素key放到val的位置上：vector的val对应的位置设置为key，哈希表的key键对应的位置设置为val的值，之后分别删除vector的最后一个元素和哈希表的val元素即可。<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomizedSet</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; keys;</span><br><span class="line">    <span class="built_in">RandomizedSet</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m.<span class="built_in">find</span>(val)!=m.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        keys.<span class="built_in">push_back</span>(val);</span><br><span class="line">        m[val] = keys.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes a value from the set. Returns true if the set contained the specified element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m.<span class="built_in">find</span>(val)==m.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = keys[keys.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">        m[temp] = m[val];</span><br><span class="line">        keys[m[temp]] = temp;</span><br><span class="line">        keys.<span class="built_in">pop_back</span>();</span><br><span class="line">        m.<span class="built_in">erase</span>(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get a random element from the set. */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keys[<span class="built_in">rand</span>()%keys.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RandomizedSet object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * RandomizedSet* obj = new RandomizedSet();</span></span><br><span class="line"><span class="comment"> * bool param_1 = obj-&gt;insert(val);</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj-&gt;remove(val);</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;getRandom();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 力扣中等 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>381.时间插入、删除和获取随机元素-允许重复</title>
      <link href="/2021/09/15/381-%E6%97%B6%E9%97%B4%E6%8F%92%E5%85%A5%E3%80%81%E5%88%A0%E9%99%A4%E5%92%8C%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E5%85%83%E7%B4%A0-%E5%85%81%E8%AE%B8%E9%87%8D%E5%A4%8D/"/>
      <url>/2021/09/15/381-%E6%97%B6%E9%97%B4%E6%8F%92%E5%85%A5%E3%80%81%E5%88%A0%E9%99%A4%E5%92%8C%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E5%85%83%E7%B4%A0-%E5%85%81%E8%AE%B8%E9%87%8D%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>设计一个支持在<em>平均 </em>时间复杂度 <strong>O(1) </strong>下<strong>， </strong>执行以下操作的数据结构。</p><p><strong>注意: 允许出现重复元素。</strong></p><ol><li><code>insert(val)</code>：向集合中插入元素 val。</li><li><code>remove(val)</code>：当 val 存在时，从集合中移除一个 val。</li><li><code>getRandom</code>：从现有集合中随机获取一个元素。每个元素被返回的概率应该与其在集合中的数量呈线性相关。</li></ol><p><strong>示例:</strong></p><p>// 初始化一个空的集合。<br>RandomizedCollection collection = new RandomizedCollection();</p><p>// 向集合中插入 1 。返回 true 表示集合不包含 1 。<br>collection.insert(1);</p><p>// 向集合中插入另一个 1 。返回 false 表示集合包含 1 。集合现在包含 [1,1] 。<br>collection.insert(1);</p><p>// 向集合中插入 2 ，返回 true 。集合现在包含 [1,1,2] 。<br>collection.insert(2);</p><p>// getRandom 应当有 2/3 的概率返回 1 ，1/3 的概率返回 2 。<br>collection.getRandom();</p><p>// 从集合中删除 1 ，返回 true 。集合现在包含 [1,2] 。<br>collection.remove(1);</p><p>// getRandom 应有相同概率返回 1 和 2 。<br>collection.getRandom();</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>用一个vector保存所有的键。<br>用一个哈希表保存键和对应的在vector的下标。<br>插入：在键对应的下标中加入一个<br>随机获得：生成随机数在vector中获取一个。<br>删除：<br>将vector最后一个元素key取出来，key对应的下标end也取出来。<br>首先把要删除val的元素在vector中的一个位置idx赋给key，之后在哈希表key的下标中删除end，添加上val的下标idx。从val的下标中删除idx即可。<br>**这里不太明白的事为什么要有<code>if(idx&lt;end) m[keys[idx]].emplace(idx)</code>一句，如果这句换了位置就不对了，一直没明白`</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomizedCollection</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>,unordered_set&lt;<span class="keyword">int</span>&gt;&gt; m;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; keys;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="built_in">RandomizedCollection</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        keys.<span class="built_in">push_back</span>(val);</span><br><span class="line">        <span class="keyword">if</span>(m.<span class="built_in">find</span>(val)==m.<span class="built_in">end</span>())&#123;</span><br><span class="line">            m[val].<span class="built_in">emplace</span>(<span class="built_in"><span class="keyword">int</span></span>(keys.<span class="built_in">size</span>()<span class="number">-1</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            m[val].<span class="built_in">emplace</span>(<span class="built_in"><span class="keyword">int</span></span>(keys.<span class="built_in">size</span>()<span class="number">-1</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes a value from the collection. Returns true if the collection contained the specified element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m.<span class="built_in">find</span>(val)==m.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//取得最后一个key对应的下标end，要删除的元素所有下标的第一个        </span></span><br><span class="line">        <span class="keyword">int</span> end = keys.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> idx = *m[val].<span class="built_in">begin</span>();</span><br><span class="line">        <span class="comment">//最后一个key赋值到要删除的位置上，并且最后一个key要删除end这个下标。</span></span><br><span class="line">        keys[idx] = keys.<span class="built_in">back</span>();</span><br><span class="line">        m[keys[idx]].<span class="built_in">erase</span>(end);</span><br><span class="line">        <span class="comment">//要删除的元素删除一个下标，如果是最后一个，就把元素从哈细表中删除。</span></span><br><span class="line">        m[val].<span class="built_in">erase</span>(idx);</span><br><span class="line">        <span class="keyword">if</span>(m[val].<span class="built_in">empty</span>()) m.<span class="built_in">erase</span>(val);</span><br><span class="line">        <span class="comment">//如果删除元素的下标不是最后一个，就把删除的下标赋给原来最后一个key。</span></span><br><span class="line">        <span class="keyword">if</span>(idx&lt;end) m[keys[idx]].<span class="built_in">emplace</span>(idx);</span><br><span class="line"></span><br><span class="line">        keys.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get a random element from the collection. */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keys[<span class="built_in">rand</span>()%keys.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RandomizedCollection object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * RandomizedCollection* obj = new RandomizedCollection();</span></span><br><span class="line"><span class="comment"> * bool param_1 = obj-&gt;insert(val);</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj-&gt;remove(val);</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;getRandom();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 力扣困难 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>允许重复</title>
      <link href="/2021/09/15/%E5%85%81%E8%AE%B8%E9%87%8D%E5%A4%8D/"/>
      <url>/2021/09/15/%E5%85%81%E8%AE%B8%E9%87%8D%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>524.通过删除字母匹配到字典里最长单词</title>
      <link href="/2021/09/14/524-%E9%80%9A%E8%BF%87%E5%88%A0%E9%99%A4%E5%AD%97%E6%AF%8D%E5%8C%B9%E9%85%8D%E5%88%B0%E5%AD%97%E5%85%B8%E9%87%8C%E6%9C%80%E9%95%BF%E5%8D%95%E8%AF%8D/"/>
      <url>/2021/09/14/524-%E9%80%9A%E8%BF%87%E5%88%A0%E9%99%A4%E5%AD%97%E6%AF%8D%E5%8C%B9%E9%85%8D%E5%88%B0%E5%AD%97%E5%85%B8%E9%87%8C%E6%9C%80%E9%95%BF%E5%8D%95%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个字符串 <code>s</code> 和一个字符串数组 <code>dictionary</code> 作为字典，找出并返回字典中最长的字符串，该字符串可以通过删除 <code>s</code> 中的某些字符得到。</p><p>如果答案不止一个，返回长度最长且字典序最小的字符串。如果答案不存在，则返回空字符串。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong>s = “abpcplea”, dictionary = [“ale”,”apple”,”monkey”,”plea”]<br><strong>输出：</strong>“apple”</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong>s = “abpcplea”, dictionary = [“a”,”b”,”c”]<br><strong>输出：</strong>“a”</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>1 &lt;= dictionary.length &lt;= 1000</code></li><li><code>1 &lt;= dictionary[i].length &lt;= 1000</code></li><li><code>s</code> 和 <code>dictionary[i]</code> 仅由小写英文字母组成<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1>暴力求解。<br>对于dictionary~i~，按照顺序与s进行比较，看看dictionary~i~在s中是否能够按顺序都找到。如果能找到，就比较长度，长度相等则比较字典序。<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">findLongestWord</span><span class="params">(string s, vector&lt;string&gt;&amp; dictionary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res_id = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dictionary.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dictionary[i].<span class="built_in">length</span>()&gt;s.<span class="built_in">length</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;s.<span class="built_in">size</span>();++k)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[k]==dictionary[i][j]) j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j!=dictionary[i].<span class="built_in">length</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(res_id==<span class="number">-1</span>||</span><br><span class="line">            dictionary[i].<span class="built_in">length</span>()&gt;dictionary[res_id].<span class="built_in">length</span>()||</span><br><span class="line">            (dictionary[i].<span class="built_in">length</span>()==dictionary[res_id].<span class="built_in">length</span>()&amp;&amp;dictionary[i]&lt;dictionary[res_id]))&#123;</span><br><span class="line">                res_id = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res_id==<span class="number">-1</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> dictionary[res_id];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 力扣中等 </tag>
            
            <tag> 暴力 </tag>
            
            <tag> 字符串匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>447.回旋镖的数量</title>
      <link href="/2021/09/13/447-%E5%9B%9E%E6%97%8B%E9%95%96%E7%9A%84%E6%95%B0%E9%87%8F/"/>
      <url>/2021/09/13/447-%E5%9B%9E%E6%97%8B%E9%95%96%E7%9A%84%E6%95%B0%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定平面上<code>n</code>  对 <strong>互不相同</strong> 的点 <code>points</code> ，其中 <code>points[i] = [xi, yi]</code> 。<strong>回旋镖</strong> 是由点 <code>(i, j, k)</code> 表示的元组 ，其中 <code>i</code> 和 <code>j</code> 之间的距离和 <code>i</code> 和 <code>k</code> 之间的距离相等（<strong>需要考虑元组的顺序</strong>）。</p><p>返回平面上所有回旋镖的数量。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong>points = [[0,0],[1,0],[2,0]]<br><strong>输出：</strong>2<br><strong>解释：</strong>两个回旋镖为 <strong>[[1,0],[0,0],[2,0]]</strong> 和 <strong>[[1,0],[2,0],[0,0]]</strong></p><p><strong>示例 2：</strong></p><p><strong>输入：</strong>points = [[1,1],[2,2],[3,3]]<br><strong>输出：</strong>2</p><p><strong>示例 3：</strong></p><p><strong>输入：</strong>points = [[1,1]]<br><strong>输出：</strong>0</p><p><strong>提示：</strong></p><ul><li>  <code>n == points.length</code></li><li>  <code>1 &lt;= n &lt;= 500</code></li><li>  <code>points[i].length == 2</code></li><li>  <code>-104 &lt;= xi, yi &lt;= 104</code></li><li>  所有点都 <strong>互不相同</strong><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1>暴力的话为O(N^3^)。<br>使用哈细表做到O(N^2^)。<br>遍历每个点i，以i为锚点，遍历其他所有节点j。计算j与i的距离，将距离加入到哈细表中。<br>对于每个i遍历之后，遍历哈希表，哈希表中如果有大于2的值，则为n*(n-1)。</li><li><em>优化**：设现在哈希表项为n，则对应的值为n</em>(n-1)。如果增加了一个，则为(n+1)<em>n，两者相差2</em>n，因此每次添加到哈希表的时候，如果哈希表的值大于1，则直接将当前值加上2*n即可。这样免去了在此遍历一次哈希表的过程。<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfBoomerangs</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;points.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            unordered_map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;points.<span class="built_in">size</span>();++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> k = <span class="built_in">pow</span>(points[j][<span class="number">0</span>]-points[i][<span class="number">0</span>],<span class="number">2</span>)+<span class="built_in">pow</span>(points[j][<span class="number">1</span>]-points[i][<span class="number">1</span>],<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">if</span>(m.<span class="built_in">find</span>(k)==m.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                    m[k] = <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    cnt += <span class="number">2</span> * m[k];</span><br><span class="line">                    m[k]+=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 哈细表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 力扣中等 </tag>
            
            <tag> 哈细表 </tag>
            
            <tag> 组合数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>678.有效的括号字符串</title>
      <link href="/2021/09/13/678-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2021/09/13/678-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个只包含三种字符的字符串：<code>（ </code>，<code>）</code> 和 <code>*</code>，写一个函数来检验这个字符串是否为有效字符串。有效字符串具有如下规则：</p><ol><li> 任何左括号 <code>(</code> 必须有相应的右括号 <code>)</code>。</li><li> 任何右括号 <code>)</code> 必须有相应的左括号 <code>(</code> 。</li><li> 左括号 <code>(</code> 必须在对应的右括号之前 <code>)</code>。</li><li> <code>*</code> 可以被视为单个右括号 <code>)</code> ，或单个左括号 <code>(</code> ，或一个空字符串。</li><li> 一个空字符串也被视为有效字符串。</li></ol><p><strong>示例 1:</strong></p><p><strong>输入:</strong> “()”<br><strong>输出:</strong> True</p><p><strong>示例 2:</strong></p><p><strong>输入:</strong> “(*)”<br><strong>输出:</strong> True</p><p><strong>示例 3:</strong></p><p><strong>输入:</strong> “(*))”<br><strong>输出:</strong> True</p><p><strong>注意:</strong></p><ol><li> 字符串大小将在 [1，100] 范围内。<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1>主要是(和*的问题。<br>总体思路：(和*分别按照相同和相对来看，最后比较记录的(与*相同与不同时的数量即可。<br>可以用栈，也可以直接记录，毕竟栈在这里的用途也是记录(和*的数量的。<br><code>lo</code>记录(与*不同时的数量，<code>hi</code>记录(和*相同时的数量。因此当<code>hi&lt;0</code>的时候一定不行（有括号大于做括号和*之和）<br>整个遍历结束后，hi肯定是要&gt;=0的，这个时候只需要看lo就可以了，如果<code>lo&lt;=0</code>，那么说明(的数量小鱼等于*的数量，*经过变换可以抵消所有的(。<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkValidString</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lo = <span class="number">0</span>, hi = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                lo++;</span><br><span class="line">                hi++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                lo = <span class="built_in">max</span>(<span class="number">0</span>,lo<span class="number">-1</span>);</span><br><span class="line">                hi--;</span><br><span class="line">                <span class="keyword">if</span>(hi&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                lo = <span class="built_in">max</span>(<span class="number">0</span>,lo<span class="number">-1</span>);</span><br><span class="line">                hi++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lo&lt;=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 力扣中等 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>376.摆动序列</title>
      <link href="/2021/09/12/376-%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97/"/>
      <url>/2021/09/12/376-%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 <strong>摆动序列 。</strong>第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。</p><ul><li><p>  例如， <code>[1, 7, 4, 9, 2, 5]</code> 是一个 <strong>摆动序列</strong> ，因为差值 <code>(6, -3, 5, -7, 3)</code> 是正负交替出现的。</p></li><li><p>  相反，<code>[1, 4, 7, 2, 5]</code> 和 <code>[1, 7, 4, 5, 5]</code> 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</p></li></ul><p><strong>子序列</strong> 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。</p><p>给你一个整数数组 <code>nums</code> ，返回 <code>nums</code> 中作为 <strong>摆动序列</strong> 的 <strong>最长子序列的长度</strong> 。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong>nums = [1,7,4,9,2,5]<br><strong>输出：</strong>6<br><strong>解释：</strong>整个序列均为摆动序列，各元素之间的差值为 (6, -3, 5, -7, 3) 。</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong>nums = [1,17,5,10,13,15,10,5,16,8]<br><strong>输出：</strong>7<br><strong>解释：</strong>这个序列包含几个长度为 7 摆动序列。<br>其中一个是 [1, 17, 10, 13, 10, 16, 8] ，各元素之间的差值为 (16, -7, 3, -3, 6, -8) 。</p><p><strong>示例 3：</strong></p><p><strong>输入：</strong>nums = [1,2,3,4,5,6,7,8,9]<br><strong>输出：</strong>2</p><p><strong>提示：</strong></p><ul><li>  <code>1 &lt;= nums.length &lt;= 1000</code></li><li>  <code>0 &lt;= nums[i] &lt;= 1000</code><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1>既然可以删除，那么只要记录下上升和下降的趋势，每次下降时，就在上省得基础上+1，每次上升时，就在下降的基础上+1，最后选择最大值即可。<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">wiggleMaxLength</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">int</span> p=<span class="number">1</span>,d=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;nums[i<span class="number">-1</span>]) p=d+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&lt;nums[i<span class="number">-1</span>]) d=p+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(p,d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数组 </tag>
            
            <tag> 力扣中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>375.猜数字大小II</title>
      <link href="/2021/09/12/375-%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8FII/"/>
      <url>/2021/09/12/375-%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8FII/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>我们正在玩一个猜数游戏，游戏规则如下：</p><p>我从 **1 **到 <strong>n</strong> 之间选择一个数字，你来猜我选了哪个数字。</p><p>每次你猜错了，我都会告诉你，我选的数字比你的大了或者小了。</p><p>然而，当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。直到你猜到我选的数字，你才算赢得了这个游戏。</p><p><strong>示例:</strong></p><p>n = 10, 我选择了8.</p><p>第一轮: 你猜我选择的数字是5，我会告诉你，我的数字更大一些，然后你需要支付5块。<br>第二轮: 你猜是7，我告诉你，我的数字更大一些，你支付7块。<br>第三轮: 你猜是9，我告诉你，我的数字更小一些，你支付9块。</p><p>游戏结束。8 就是我选的数字。</p><p>你最终要支付 5 + 7 + 9 = 21 块钱。</p><p>给定 <strong>n ≥ 1，</strong>计算你至少需要拥有多少现金才能确保你能赢得这个游戏</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>刚开始没看明白，看了解析才知道。<br>设置数组dp，其中dp[i][j]表示从i到j所需拥有多仨后现金才能保证赢得这个游戏。<br>因此最后返回dp[1][n]即可。</p><p>对于dp[i][j]，其值应该为：每次猜测结果为x的时候，dp[i][x-1]与dp[x+1][j]中的最大值与猜测的x相加，这样才能保证但在dp[i][j]内所有的猜测组合都可以在某个现金之内完成。<br>从n-&gt;0开始遍历i，对于每个i，从i-n遍历j，对于里面的所有j，选择预测为x的时候，选择dp[i][x-1]与dp[x+1][j]中的最大值与其相加相加即可。<br>对于</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMoneyAmount</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dp[n+<span class="number">2</span>][n+<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)*(n+<span class="number">2</span>)*(n+<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i;j &lt;= n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j) dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = INT_MAX;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> x=i;x&lt;=j;++x)&#123;</span><br><span class="line">                        dp[i][j] = <span class="built_in">min</span>(dp[i][j],<span class="built_in">max</span>(dp[i][x<span class="number">-1</span>],dp[x+<span class="number">1</span>][j])+x);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">1</span>][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 力扣中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>373.查找和最小的K对数字</title>
      <link href="/2021/09/12/373-%E6%9F%A5%E6%89%BE%E5%92%8C%E6%9C%80%E5%B0%8F%E7%9A%84K%E5%AF%B9%E6%95%B0%E5%AD%97/"/>
      <url>/2021/09/12/373-%E6%9F%A5%E6%89%BE%E5%92%8C%E6%9C%80%E5%B0%8F%E7%9A%84K%E5%AF%B9%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定两个以升序排列的整数数组 <code>nums1</code> 和  <code>nums2</code>, 以及一个整数 <code>k</code>。</p><p>定义一对值 <code>(u,v)</code>，其中第一个元素来自 <code>nums1</code>，第二个元素来自 <code>nums2</code>。</p><p>请找到和最小的 <code>k</code> 个数对 <code>(u1,v1)</code>, <code> (u2,v2)</code>  …  <code>(uk,vk)</code> 。</p><p><strong>示例 1:</strong></p><p><strong>输入:</strong> nums1 = [1,7,11], nums2 = [2,4,6], k = 3<br><strong>输出:</strong> [1,2],[1,4],[1,6]<br><strong>解释:</strong> 返回序列中的前 3 对数：<br>     [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]</p><p><strong>示例 2:</strong></p><p><strong>输入:</strong> nums1 = [1,1,2], nums2 = [1,2,3], k = 2<br><strong>输出:</strong> [1,1],[1,1]<br><strong>解释:</strong> 返回序列中的前 2 对数：<br>     [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]</p><p><strong>示例 3:</strong></p><p><strong>输入:</strong> nums1 = [1,2], nums2 = [3], k = 3<br><strong>输出:</strong> [1,3],[2,3]<br><strong>解释:</strong> 也可能序列中所有的数对都被返回:[1,3],[2,3]</p><p><strong>提示:</strong></p><ul><li>  <code>1 &lt;= nums1.length, nums2.length &lt;= 104</code></li><li>  <code>-109 &lt;= nums1[i], nums2[i] &lt;= 109</code></li><li>  <code>nums1</code>, <code>nums2</code> 均为升序排列</li><li>  <code>1 &lt;= k &lt;= 1000</code><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1>抄的题解的思路<br>使用最大堆来对已经保存的数据对排序。<br>最大堆保存两者的值之和，在两个数组中对应的下标。<br>首先将一个数组A的第一个和另一个数组B的全部进行组合，记录下数组A、B的下标（这里对于数组A都是0），第一个最小的对一定在这两个之间。<br>之后每取出一个对（i，j），就以数组B的下标j为不变，数组A的下标后移一个加入到当前的优先队列中。<br><code>每次新增的数组，下标一定与其中某一个已有下标，一定为之和相差1的关系</code><br>因此每次选一个，加一个，能够把所有情况都考虑到。<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">kSmallestPairs</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums1, vector&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&gt;nums1.<span class="built_in">size</span>()*nums2.<span class="built_in">size</span>()) k = nums1.<span class="built_in">size</span>()*nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(!nums2.<span class="built_in">size</span>()||!nums1.<span class="built_in">size</span>()) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="keyword">int</span>,pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;&gt; h;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums1.<span class="built_in">size</span>();++i) h.<span class="built_in">push</span>(&#123;-nums1[i]-nums2[<span class="number">0</span>],&#123;i,<span class="number">0</span>&#125;&#125;);</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">while</span>(res.<span class="built_in">size</span>()&lt;k)&#123;</span><br><span class="line">            <span class="keyword">auto</span> t = h.<span class="built_in">top</span>();</span><br><span class="line">            h.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">int</span> i = t.second.first,j=t.second.second;</span><br><span class="line">            res.<span class="built_in">push_back</span>(&#123;nums1[i],nums2[j++]&#125;);</span><br><span class="line">            <span class="keyword">if</span>(j&lt;nums2.<span class="built_in">size</span>()) h.<span class="built_in">push</span>(&#123;-nums1[i]-nums2[j],&#123;i,j&#125;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 堆 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数组 </tag>
            
            <tag> 力扣中等 </tag>
            
            <tag> 优先队列 </tag>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>600.不含连续1的非负整数</title>
      <link href="/2021/09/11/600-%E4%B8%8D%E5%90%AB%E8%BF%9E%E7%BB%AD1%E7%9A%84%E9%9D%9E%E8%B4%9F%E6%95%B4%E6%95%B0/"/>
      <url>/2021/09/11/600-%E4%B8%8D%E5%90%AB%E8%BF%9E%E7%BB%AD1%E7%9A%84%E9%9D%9E%E8%B4%9F%E6%95%B4%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个正整数 n，找出小于或等于 n 的非负整数中，其二进制表示不包含 **连续的1 **的个数。</p><p><strong>示例 1:</strong></p><p><strong>输入:</strong> 5<br><strong>输出:</strong> 5<br><strong>解释:</strong><br>下面是带有相应二进制表示的非负整数&lt;= 5：<br>0 : 0<br>1 : 1<br>2 : 10<br>3 : 11<br>4 : 100<br>5 : 101<br>其中，只有整数3违反规则（有两个连续的1），其他5个满足规则。</p><p><strong>说明:</strong> 1 &lt;= n &lt;= 109</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>说实话没怎么懂，看 @宫水三叶 的讲解，抄了抄代码。<br>@宫水三叶的 讲解</p><blockquote><p>这是一道典型的「数位 DP」题。</p><p><strong>对于「数位 DP」题，都存在「询问 [ a , b ] [a, b] [a,b]（ a a a 和 b b b 均为正整数，且 a &lt; b a &lt; b a&lt;b）区间内符合条件的数值个数为多少」的一般形式，通常我们需要实现一个查询 [ 0 , x ] [0, x] [0,x] 有多少合法数值的函数 <code>int dp(int x)</code>，然后应用「容斥原理」求解出 [ a , b ] [a, b] [a,b] 的个数： d p ( b ) − d p ( a − 1 ) dp(b) - dp(a - 1) dp(b)−dp(a−1)。</strong><br>对于本题，虽然只需要求解 [ 0 , n ] [0, n] [0,n] 范围内数的个数，但其实拓展到求 [ a , b ] [a, b] [a,b] 区间个数的也不会增加难度。</p><p>具体的，对于「数位 DP」问题通常是「从高位到低位」的分情况讨论。</p><p>不失一般性的考虑数值 n n n 的某一位 c u r cur cur 是如何被处理的：</p><ol><li>如果当前位 c u r = 1 cur = 1 cur=1 的话，由于我们需要满足「小于等于 n n n」的要求，因此如果该位填 0 0 0 的话，后面的低位填什么都是满足要求的，因此我们期望能够查表得出「长度为 i + 1 i + 1 i+1，且二进制位置 i i i 数值为 0 0 0 时」有多少合法数值，将其累加到答案中；<br> 与此同时，我们需要确保当前位选 1 1 1 是合法的，即我们需要记录上一位 p r e v prev prev 是什么，确保 c u r cur cur 和 p r e v prev prev 不同时为 1 1 1。</li><li> 如果当前位 c u r = 0 cur = 0 cur=0 的话，我们只能选 0 0 0，并决策下一位。</li></ol><p>当出现「当前位无法填入 c u r cur cur」或者「决策到最低位」时，则完成了所有合法答案的统计。</p><p>至于流程 1 1 1 中的查表操作，我们可以使用 <code>static</code> 预处理出 <code>f</code> 数组，定义 f [ i ] [ j ] f[i][j] f[i][j] 为考虑二进制长度为 i i i，且最高位为 j j j（ 0 0 0 or 1 1 1）时的合法数个数。</p><p>注意：为了防止重复计数问题，我们在不失一般性的计算 f [ i ] [ 0 ] f[i][0] f[i][0] 和 f [ i ] [ 1 ] f[i][1] f[i][1] 时，不能采用诸如 f [ i ] [ c u r ] + = f [ i − 1 ] [ p r e v ] f[i][cur] += f[i - 1][prev] f[i][cur]+=f[i−1][prev] 的 “后向查找依赖” 的方式进行转移，而要采用 f [ i + 1 ] [ c u r ] + = f [ i ] [ p r e v ] f[i + 1][cur] += f[i][prev] f[i+1][cur]+=f[i][prev] “前向主动更新” 的方式进行转移。</p><p>不失一般性的考虑 f [ i ] [ 0 ] f[i][0] f[i][0] 和 f [ i ] [ 1 ] f[i][1] f[i][1] 能够更新哪些状态：</p><ul><li><p>  如果期望当前位填 0 0 0 的话，需要统计所有满足 ( 0… ) 2 (0…)_2 (0…)2​ 形式的合法数值，当前位的低一位只能填 1 1 1（填 0 0 0 会出现重复计数，即需要忽略前导零的数值），此时有： f [ i + 1 ] [ 0 ] = f [ i ] [ 1 ] f[i + 1][0] = f[i][1] f[i+1][0]=f[i][1]；</p></li><li><p>  如果期望当前位填 1 1 1 的话，需要统计所有满足 ( 1… ) 2 (1…)_2 (1…)2​ 和 ( 0… ) 2 (0…)_2 (0…)2​ 形式的合法数值：</p></li><li><p>  ( 1… ) 2 (1…)_2 (1…)2​ 时，当前位的低一位只能填 0 0 0；此时有： f [ i + 1 ] [ 1 ] + = f [ i ] [ 0 ] f[i + 1][1] += f[i][0] f[i+1][1]+=f[i][0]；    *   ( 0… ) 2 (0…)_2 (0…)2​ 时，当前位的低一位只能填 1 1 1；此时有： f [ i + 1 ] [ 1 ] + = f [ i ] [ 1 ] f[i + 1][1] += f[i][1] f[i+1][1]+=f[i][1]。</p></li></ul></blockquote><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findIntegers</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> N = <span class="number">32</span>;</span><br><span class="line">        <span class="keyword">int</span> dp[N][<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)*N*<span class="number">2</span>);</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            dp[i+<span class="number">1</span>][<span class="number">0</span>] = dp[i][<span class="number">1</span>];</span><br><span class="line">            dp[i+<span class="number">1</span>][<span class="number">1</span>] = dp[i][<span class="number">0</span>]+dp[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> pre = <span class="number">0</span>,ans=<span class="number">0</span>,idx=<span class="number">31</span>;</span><br><span class="line">        <span class="keyword">for</span>(;idx&gt;=<span class="number">0</span>;--idx)&#123;</span><br><span class="line">            <span class="keyword">if</span>(((n&gt;&gt;idx)&amp;<span class="number">1</span>)==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(;idx&gt;=<span class="number">0</span>;--idx)&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = (n&gt;&gt;idx)&amp;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(cur==<span class="number">1</span>) ans+=dp[idx+<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pre==<span class="number">1</span>&amp;&amp;cur==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            pre=cur;</span><br><span class="line">            <span class="keyword">if</span>(idx==<span class="number">0</span>) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 力扣困难 </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>502.IPO</title>
      <link href="/2021/09/08/502-IPO/"/>
      <url>/2021/09/08/502-IPO/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>假设 力扣（LeetCode）即将开始 <strong>IPO</strong> 。为了以更高的价格将股票卖给风险投资公司，力扣 希望在 IPO 之前开展一些项目以增加其资本。 由于资源有限，它只能在 IPO 之前完成最多 <code>k</code> 个不同的项目。帮助 力扣 设计完成最多 <code>k</code> 个不同项目后得到最大总资本的方式。</p><p>给你 <code>n</code> 个项目。对于每个项目 <code>i</code>  ，它都有一个纯利润 <code>profits[i]</code> ，和启动该项目需要的最小资本 <code>capital[i]</code> 。</p><p>最初，你的资本为 <code>w</code> 。当你完成一个项目时，你将获得纯利润，且利润将被添加到你的总资本中。</p><p>总而言之，从给定项目中选择 <strong>最多</strong> <code>k</code> 个不同项目的列表，以 <strong>最大化最终资本</strong> ，并输出最终可获得的最多资本。</p><p>答案保证在 32 位有符号整数范围内。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong>k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]<br><strong>输出：</strong>4<br><strong>解释：</strong> 由于你的初始资本为 0，你仅可以从 0 号项目开始。<br>在完成后，你将获得 1 的利润，你的总资本将变为 1。<br>此时你可以选择开始 1 号或 2 号项目。<br>由于你最多可以选择两个项目，所以你需要完成 2 号项目以获得最大的资本。<br>因此，输出最后最大化的资本，为 0 + 1 + 3 = 4。</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong>k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]<br><strong>输出：</strong>6</p><p><strong>提示：</strong></p><ul><li>  <code>1 &lt;= k &lt;= 105</code></li><li>  <code>0 &lt;= w &lt;= 109</code></li><li>  <code>n == profits.length</code></li><li>  <code>n == capital.length</code></li><li>  <code>1 &lt;= n &lt;= 105</code></li><li>  <code>0 &lt;= profits[i] &lt;= 104</code></li><li>  <code>0 &lt;= capital[i] &lt;= 109</code><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1></li><li><em>银行家算法</em>*<br>将capital和profits配对，并按照captial从小到大进行排序。<br>每次对比w和capital<del>i</del>，如果w比capital<del>i</del>大，则将对应的profits<del>i</del>加入到优先队列中。<br>全部加完后，从优先队列中选择最大的profits加到w中。<br>重复上述k次。<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMaximizedCapital</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> w, vector&lt;<span class="keyword">int</span>&gt;&amp; profits, vector&lt;<span class="keyword">int</span>&gt;&amp; capital)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = profits.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; <span class="built_in">arr</span>(n);</span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>,vector&lt;<span class="keyword">int</span>&gt;,less&lt;<span class="keyword">int</span>&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123; arr[i] = &#123;capital[i],profits[i]&#125;; &#125;</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(),arr.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;++i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(idx&lt;n&amp;&amp;arr[idx].first&lt;=w)&#123;</span><br><span class="line">                pq.<span class="built_in">push</span>(arr[idx++].second);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!pq.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                w+=pq.<span class="built_in">top</span>();</span><br><span class="line">                pq.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 力扣困难 </tag>
            
            <tag> 大根堆 </tag>
            
            <tag> 优先队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>931.下降路径最小和</title>
      <link href="/2021/09/08/931-%E4%B8%8B%E9%99%8D%E8%B7%AF%E5%BE%84%E6%9C%80%E5%B0%8F%E5%92%8C/"/>
      <url>/2021/09/08/931-%E4%B8%8B%E9%99%8D%E8%B7%AF%E5%BE%84%E6%9C%80%E5%B0%8F%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个 <code>n x n</code> 的 <strong>方形</strong> 整数数组 <code>matrix</code> ，请你找出并返回通过 <code>matrix</code> 的<strong>下降路径</strong>  的  <strong>最小和</strong> 。</p><p><strong>下降路径</strong> 可以从第一行中的任何元素开始，并从每一行中选择一个元素。在下一行选择的元素和当前行所选元素最多相隔一列（即位于正下方或者沿对角线向左或者向右的第一个元素）。具体来说，位置 <code>(row, col)</code> 的下一个元素应当是 <code>(row + 1, col - 1)</code>、<code>(row + 1, col)</code> 或者 <code>(row + 1, col + 1)</code> 。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong> matrix = [[2,1,3],[6,5,4],[7,8,9]]<br><strong>输出：</strong> 13<br><strong>解释：</strong> 下面是两条和最小的下降路径，用加粗+斜体标注：<br>[[2,<em><strong>1</strong></em>,3],      [[2,<em><strong>1</strong></em>,3],<br> [6,<em><strong>5</strong></em>,4],       [6,5,<em><strong>4</strong></em>],<br> [<em><strong>7</strong></em>,8,9]]       [7,<em><strong>8</strong></em>,9]]</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong> matrix = [[-19,57],[-40,-5]]<br><strong>输出：</strong> -59<br><strong>解释：</strong> 下面是一条和最小的下降路径，用加粗+斜体标注：<br>[[<em><strong>-19</strong></em>,57],<br> [<em><strong>-40</strong></em>,-5]]</p><p><strong>示例 3：</strong></p><p><strong>输入：</strong> matrix = [[-48]]<br><strong>输出：</strong> -48</p><p><strong>提示：</strong></p><ul><li>  <code>n == matrix.length</code></li><li>  <code>n == matrix[i].length</code></li><li>  <code>1 &lt;= n &lt;= 100</code></li><li>  <code>-100 &lt;= matrix[i][j] &lt;= 100</code><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1></li></ul><ol><li>DFS（超时）<br>从上往下，遍历所有的情况。每次选择下面三支中路径和最小的加到上当前值作为从当前路径起始的路径长度。</li><li>动态规划<br>从下往上，依次遍历每一层每个节点作为起点到最下面的路径长度最小值。<br>最后取第一行最小的即可。<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1></li><li>DFS<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minFallingPathSum</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix.<span class="built_in">size</span>()&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> val = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;matrix[<span class="number">0</span>].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            val = <span class="built_in">min</span>(val,<span class="built_in">minFallingPathSum</span>(matrix,<span class="number">0</span>,i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minFallingPathSum</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; m,<span class="keyword">int</span> y,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(y&gt;=m.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>||x&gt;=m[<span class="number">0</span>].<span class="built_in">size</span>()) <span class="keyword">return</span> INT_MAX;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="built_in">minFallingPathSum</span>(m,y+<span class="number">1</span>,x<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">int</span> c = <span class="built_in">minFallingPathSum</span>(m,y+<span class="number">1</span>,x);</span><br><span class="line">        <span class="keyword">int</span> b = <span class="built_in">minFallingPathSum</span>(m,y+<span class="number">1</span>,x+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> g = <span class="built_in">min</span>(a,<span class="built_in">min</span>(b,c));</span><br><span class="line">        <span class="keyword">if</span>(g==INT_MAX) <span class="keyword">return</span> INT_MAX;</span><br><span class="line">        <span class="keyword">return</span> g+m[y][x];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>动态规划<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minFallingPathSum</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.<span class="built_in">size</span>(),n=matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(m,vector&lt;<span class="keyword">int</span>&gt;(n,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;n;++x) dp[m<span class="number">-1</span>][x] = matrix[m<span class="number">-1</span>][x];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y=m<span class="number">-2</span>;y&gt;=<span class="number">0</span>;--y)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;n<span class="number">-1</span>;++x)&#123;</span><br><span class="line">                <span class="keyword">int</span> val = dp[y+<span class="number">1</span>][x];</span><br><span class="line">                <span class="keyword">if</span>(x<span class="number">-1</span>&gt;=<span class="number">0</span>) val = <span class="built_in">min</span>(val,dp[y+<span class="number">1</span>][x<span class="number">-1</span>]);</span><br><span class="line">                <span class="keyword">if</span>(x+<span class="number">1</span>&lt;n) val = <span class="built_in">min</span>(val,dp[y+<span class="number">1</span>][x+<span class="number">1</span>]);</span><br><span class="line">                dp[y][x] = matrix[y][x]+val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;n;++x) res = <span class="built_in">min</span>(res,dp[<span class="number">0</span>][x]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 力扣中等 </tag>
            
            <tag> 二维数组 </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>470.用 Rand7() 实现 Rand10()</title>
      <link href="/2021/09/05/470-%E7%94%A8-Rand7-%E5%AE%9E%E7%8E%B0-Rand10/"/>
      <url>/2021/09/05/470-%E7%94%A8-Rand7-%E5%AE%9E%E7%8E%B0-Rand10/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>已有方法 <code>rand7</code> 可生成 1 到 7 范围内的均匀随机整数，试写一个方法 <code>rand10</code> 生成 1 到 10 范围内的均匀随机整数。</p><p>不要使用系统的 <code>Math.random()</code> 方法。</p><p><strong>示例 1:</strong></p><p><strong>输入:</strong> 1<br><strong>输出:</strong> [7]</p><p><strong>示例 2:</strong></p><p><strong>输入:</strong> 2<br><strong>输出:</strong> [8,4]</p><p><strong>示例 3:</strong></p><p><strong>输入:</strong> 3<br><strong>输出:</strong> [8,1,10]</p><p><strong>提示:</strong></p><ol><li> <code>rand7</code> 已定义。</li><li> 传入参数: <code>n</code> 表示 <code>rand10</code> 的调用次数。</li></ol><p><strong>进阶:</strong></p><ol><li> <code>rand7()</code>调用次数的 <a href="https://en.wikipedia.org/wiki/Expected_value">期望值</a> 是多少 ?</li><li> 你能否尽量少调用 <code>rand7()</code> ?<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1></li><li>重复调用10次rand7(),这样能够生成1~70的随机数，接着对10取余即可。</li><li>基于公式<br>$$(randX()-1)*randY()+randY()$$<br>生成<code>1~X*Y</code>之内的随机数。</li></ol><ul><li>为了减少对rand7()的调用，需要对不同的<code>1~X*Y</code>之内的随机数进行判断。<ul><li>首先生成<code>1~49</code>之间的数，如果在<code>1~40</code>之间，直接对10取余即可。</li><li>如果在<code>41~49</code>之间，减去40后就是一个<code>1~9</code>之间的随机数，仍然调用以上公式，生成<code>1~63</code>之间的随机数。<ul><li>如果在<code>1~60</code>之间，直接对10取余即可。</li><li>如果在<code>61~63</code>之间，减去60后就是一个<code>1~3</code>之间的随机数，仍然调用上述公式，生成一个<code>1~21</code>之间的随机数……<br>到这里，如果想要继续嵌套可以，但是此时还没有生成的概率已经很小了。如果还没有生成直接在大循环中重新生成也可以。</li></ul></li></ul></li></ul><ol start="3"><li>其他思考<br> 我尝试将两种概率分布都转化为正态分布，<br> $$\frac{(rand7()-mean(rand7())}{std(rand7()))}=\frac{(rand10()-mean(rand10())}{std(rand10())}$$<br> 之后移项的方式来进行生成，但是不知道为什么一直不对：<br> $$\frac{(rand7()-mean(rand7())*std(rand10())}{std(rand7())}+mean(rand10()))=rand10()$$</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ol><li>暴力法 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The rand7() API is already defined for you.</span></span><br><span class="line"><span class="comment">// int rand7();</span></span><br><span class="line"><span class="comment">// @return a random integer in the range 1 to 7</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) n+=<span class="built_in">rand7</span>();</span><br><span class="line">    <span class="keyword">return</span> n%<span class="number">10</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>公式法 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The rand7() API is already defined for you.</span></span><br><span class="line"><span class="comment">// int rand7();</span></span><br><span class="line"><span class="comment">// @return a random integer in the range 1 to 7</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rand10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = (<span class="built_in">rand7</span>()<span class="number">-1</span>)*<span class="number">7</span>+<span class="built_in">rand7</span>();</span><br><span class="line">            <span class="keyword">if</span>(num&lt;=<span class="number">40</span>) <span class="keyword">return</span> <span class="number">1</span>+num%<span class="number">10</span>;</span><br><span class="line">            num = (num<span class="number">-40</span><span class="number">-1</span>)*<span class="built_in">rand7</span>()+<span class="built_in">rand7</span>();</span><br><span class="line">            <span class="keyword">if</span>(num&lt;=<span class="number">60</span>) <span class="keyword">return</span> <span class="number">1</span>+num%<span class="number">10</span>;</span><br><span class="line">            num = (num<span class="number">-60</span><span class="number">-1</span>)*<span class="built_in">rand7</span>()+<span class="built_in">rand7</span>();</span><br><span class="line">            <span class="keyword">if</span>(num&lt;=<span class="number">20</span>) <span class="keyword">return</span> <span class="number">1</span>+num%<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数学 </category>
          
          <category> 随机过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数学 </tag>
            
            <tag> 随机数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5864.游戏中弱角色的数量</title>
      <link href="/2021/09/05/5864-%E6%B8%B8%E6%88%8F%E4%B8%AD%E5%BC%B1%E8%A7%92%E8%89%B2%E7%9A%84%E6%95%B0%E9%87%8F/"/>
      <url>/2021/09/05/5864-%E6%B8%B8%E6%88%8F%E4%B8%AD%E5%BC%B1%E8%A7%92%E8%89%B2%E7%9A%84%E6%95%B0%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>你正在参加一个多角色游戏，每个角色都有两个主要属性：<strong>攻击</strong> 和 <strong>防御</strong> 。给你一个二维整数数组 <code>properties</code> ，其中 <code>properties[i] = [attacki, defensei]</code> 表示游戏中第 <code>i</code> 个角色的属性。</p><p>如果存在一个其他角色的攻击和防御等级 <strong>都严格高于</strong> 该角色的攻击和防御等级，则认为该角色为 <strong>弱角色</strong> 。更正式地，如果认为角色 <code>i</code> <strong>弱于</strong> 存在的另一个角色 <code>j</code> ，那么 <code>attackj &gt; attacki</code> 且 <code>defensej &gt; defensei</code> 。</p><p>返回 <strong>弱角色</strong> 的数量。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong> properties = [[5,5],[6,3],[3,6]]<br><strong>输出：</strong> 0<br><strong>解释：</strong> 不存在攻击和防御都严格高于其他角色的角色。</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong> properties = [[2,2],[3,3]]<br><strong>输出：</strong> 1<br><strong>解释：</strong> 第一个角色是弱角色，因为第二个角色的攻击和防御严格大于该角色。</p><p><strong>示例 3：</strong></p><p><strong>输入：</strong> properties = [[1,5],[10,4],[4,3]]<br><strong>输出：</strong> 1<br><strong>解释：</strong> 第三个角色是弱角色，因为第二个角色的攻击和防御严格大于该角色。</p><p><strong>提示：</strong></p><ul><li>  <code>2 &lt;= properties.length &lt;= 105</code></li><li>  <code>properties[i].length == 2</code></li><li>  <code>1 &lt;= attack i, defensei &lt;= 105</code><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1>按attack从大到小排序，attack相同defense按照从小到大排序。<br>之后设置一个值用来记录遍历到排序后的properties<del>i</del>的时候的已经遍历过得defense最大值。当该最大值大于properties<del>i</del>的defense的时候就证明有当前的propertis<del>i</del>可以是一个弱角色。这样就可以保障：</li></ul><ol><li>在attack相同时，由于defense从小到大排序，所以并不会出现相同值记录相同attack下的任何值。</li><li>在attack减小时，由于defense记录的是最大值，并且遍历过得attack都&gt;=当前的attack，同时由1知相同attack下的值并不会被记录，因此：只需要记录的最大defense大于单钱的properties<del>i</del>的defense的时候就代表该角色是弱角色。</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfWeakCharacters</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; properties)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(properties.<span class="built_in">begin</span>(),properties.<span class="built_in">end</span>(),[](<span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt;&amp; a,<span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt;&amp; b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[<span class="number">0</span>]==b[<span class="number">0</span>]) <span class="keyword">return</span> a[<span class="number">1</span>]&lt;b[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> a[<span class="number">0</span>]&gt;b[<span class="number">0</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>,maxv = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;properties.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(maxv&gt;properties[i][<span class="number">1</span>])&#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">            maxv = <span class="built_in">max</span>(maxv,properties[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 新知识点 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 力扣中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>315.计算右侧小于当前元素的个数</title>
      <link href="/2021/09/04/315-%E8%AE%A1%E7%AE%97%E5%8F%B3%E4%BE%A7%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
      <url>/2021/09/04/315-%E8%AE%A1%E7%AE%97%E5%8F%B3%E4%BE%A7%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个整数数组 <em>nums</em>，按要求返回一个新数组 <em>counts</em>。数组 <em>counts</em> 有该性质： <code>counts[i]</code> 的值是  <code>nums[i]</code> 右侧小于 <code>nums[i]</code> 的元素的数量。<br><strong>示例：</strong></p><p><strong>输入：</strong> nums = [5,2,6,1]<br><strong>输出：</strong><code>[2,1,1,0]</code><br><strong>解释：</strong><br>5 的右侧有 <strong>2</strong> 个更小的元素 (2 和 1)<br>2 的右侧仅有 <strong>1</strong> 个更小的元素 (1)<br>6 的右侧有 <strong>1</strong> 个更小的元素 (1)<br>1 的右侧有 <strong>0</strong> 个更小的元素</p><p><strong>提示：</strong></p><ul><li>  <code>0 &lt;= nums.length &lt;= 10^5</code></li><li>  <code>-10^4 &lt;= nums[i] &lt;= 10^4</code><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1>其实除了暴力没有特别好的思路，后来看了看别人的题解，自己又写了一遍。<h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2>对下标进行归并排序，并且在排序时记录下每个位置后面数字的个数<h2 id="详细思路"><a href="#详细思路" class="headerlink" title="详细思路"></a>详细思路</h2>首先对整个数组进行归并。<br>在每个归并段内，通过比较<code>nums[idx[i]]</code>来对<code>idx[i]</code>进行归并排序。并且在排序出现：<code>nums[idx[i]]&gt;nums[idx[j]]</code>的时候，在<code>idx[i]</code>这个位置对应的最终结果（也即比nums中下标为<code>idx[i]</code>的元素右侧比这个元素大的元素个数）上面，加上该归并段内比<code>nums[idx]</code>大的数的个数：<code>e-j+1</code>。<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">countSmaller</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(n,<span class="number">0</span>)</span>,<span class="title">helper</span><span class="params">(n,<span class="number">0</span>)</span>,<span class="title">idxs</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) idxs[i] = i;</span><br><span class="line">        <span class="built_in">mergeAndSort</span>(nums,res,idxs,helper,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mergeAndSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums,vector&lt;<span class="keyword">int</span>&gt;&amp; res,vector&lt;<span class="keyword">int</span>&gt;&amp; idxs,vector&lt;<span class="keyword">int</span>&gt;&amp; helper,<span class="keyword">int</span> s,<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s&gt;=e) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = s+(e-s)/<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">mergeAndSort</span>(nums,res,idxs,helper,s,mid);</span><br><span class="line">        <span class="built_in">mergeAndSort</span>(nums,res,idxs,helper,mid+<span class="number">1</span>,e);</span><br><span class="line">        <span class="built_in">mergeAndCount</span>(nums,res,idxs,helper,s,mid,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mergeAndCount</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums,vector&lt;<span class="keyword">int</span>&gt;&amp; res,vector&lt;<span class="keyword">int</span>&gt;&amp; idxs,</span></span></span><br><span class="line"><span class="params"><span class="function">    vector&lt;<span class="keyword">int</span>&gt;&amp; helper,<span class="keyword">int</span> s,<span class="keyword">int</span> mid,<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=s;i&lt;=e;i++)&#123;</span><br><span class="line">            helper[i] = idxs[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i=s,j=mid+<span class="number">1</span>,idx=s;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=e)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[helper[i]]&lt;=nums[helper[j]])&#123;</span><br><span class="line">                idxs[idx++] = helper[j++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res[helper[i]]+= e-j+<span class="number">1</span>;</span><br><span class="line">                idxs[idx++]=helper[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid)&#123;</span><br><span class="line">            idxs[idx++] = helper[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;=e)&#123;</span><br><span class="line">            idxs[idx++] = helper[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 分治 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数组 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> 分治 </tag>
            
            <tag> 归并排序 </tag>
            
            <tag> 二分排序 </tag>
            
            <tag> 力扣困难 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP简洁模板</title>
      <link href="/2021/09/04/KMP%E7%AE%80%E6%B4%81%E6%A8%A1%E6%9D%BF/"/>
      <url>/2021/09/04/KMP%E7%AE%80%E6%B4%81%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(needle.<span class="built_in">size</span>()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>* nxt = <span class="keyword">new</span> <span class="keyword">int</span>[needle.<span class="built_in">length</span>()];</span><br><span class="line">    <span class="built_in">getNext</span>(needle,nxt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;haystack.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;haystack[i]!=needle[j]) j = nxt[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(haystack[i]==needle[j]) j++;</span><br><span class="line">        <span class="keyword">if</span>(j==needle.<span class="built_in">size</span>()) <span class="keyword">return</span> i-j+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(string pat,<span class="keyword">int</span>* nxt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pLen = pat.<span class="built_in">length</span>();</span><br><span class="line">    nxt[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,j = <span class="number">0</span>;i&lt;pLen;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;pat[i]!=pat[j]) j=nxt[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(pat[i]==pat[j]) j++;</span><br><span class="line">        nxt[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 模板 </category>
          
          <category> 字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>198.打家劫舍</title>
      <link href="/2021/09/04/198-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/"/>
      <url>/2021/09/04/198-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>不触动警报装置的情况下</strong> ，一夜之内能够偷窃到的最高金额。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong>[1,2,3,1]<br><strong>输出：</strong>4<br><strong>解释：</strong>偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。<br>     偷窃到的最高金额 = 1 + 3 = 4 。</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong>[2,7,9,3,1]<br><strong>输出：</strong>12<br><strong>解释：</strong>偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。<br>     偷窃到的最高金额 = 2 + 9 + 1 = 12 。</p><p><strong>提示：</strong></p><ul><li>  <code>1 &lt;= nums.length &lt;= 100</code></li><li>  <code>0 &lt;= nums[i] &lt;= 400</code></li></ul><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>动态规划入门：</p><p><code>dp[i]=max(dp[i-1],nums[i]+dp[i-2])</code></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(nums.size()+<span class="number">2</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            dp[i+<span class="number">2</span>] = <span class="built_in">max</span>(nums[i] + dp[i],dp[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>240-搜索二维矩阵 II</title>
      <link href="/2021/09/03/240-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5-II/"/>
      <url>/2021/09/03/240-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5-II/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>编写一个高效的算法来搜索 <code>*m* x *n*</code> 矩阵 <code>matrix</code> 中的一个目标值 <code>target</code> 。该矩阵具有以下特性：</p><ul><li>  每行的元素从左到右升序排列。</li><li>  每列的元素从上到下升序排列。</li></ul><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/25/searchgrid2.jpg"></p><p><strong>输入：</strong>matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5<br><strong>输出：</strong>true</p><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/25/searchgrid.jpg"></p><p><strong>输入：</strong>matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20<br><strong>输出：</strong>false</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li><p>线性搜索：</p><p> 从右上往左下搜索。如果比右上大，就去下一行。如果比下一行小，就去该行左侧。</p></li><li><p>二分搜索</p><p> 指定左右、上下边界，与边界中心进行比较。</p><ul><li>如果比边界中心小：去中心左侧和上侧搜索。</li><li>如果比边界中心大：去中心右侧和下侧搜索。</li></ul></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ol><li><p>线性搜索</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">searchMatrix</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">0</span>,x = matrix[<span class="number">0</span>].<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;y&lt;matrix.<span class="built_in">size</span>()&amp;&amp;x&gt;=<span class="number">0</span>;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[y][x]==target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(matrix[y][x]&lt;target) y++;</span><br><span class="line">            <span class="keyword">else</span> x--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>二分搜索</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">searchMatrix</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.<span class="built_in">size</span>(), n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">searchMatrix</span>(matrix,target,<span class="number">0</span>,m<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">searchMatrix</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix,<span class="keyword">int</span> target,<span class="keyword">int</span> ru,<span class="keyword">int</span> rd,<span class="keyword">int</span> cl,<span class="keyword">int</span> cr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ru&gt;rd||cl&gt;cr) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> rm = (ru+rd)/<span class="number">2</span>, cm = (cl+cr)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(matrix[rm][cm]==target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(matrix[rm][cm]&gt;target)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">searchMatrix</span>(matrix,target,ru,rm<span class="number">-1</span>,cl,cr)||</span><br><span class="line">            <span class="built_in">searchMatrix</span>(matrix,target,ru,rd,cl,cm<span class="number">-1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">searchMatrix</span>(matrix,target,ru,rd,cm+<span class="number">1</span>,cr)||</span><br><span class="line">            <span class="built_in">searchMatrix</span>(matrix,target,rm+<span class="number">1</span>,rd,cl,cr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 搜索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二分 </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1109-航班预订统计</title>
      <link href="/2021/08/31/1109-%E8%88%AA%E7%8F%AD%E9%A2%84%E8%AE%A2%E7%BB%9F%E8%AE%A1/"/>
      <url>/2021/08/31/1109-%E8%88%AA%E7%8F%AD%E9%A2%84%E8%AE%A2%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h4 id="1109-航班预订统计"><a href="#1109-航班预订统计" class="headerlink" title="1109. 航班预订统计"></a><a href="https://leetcode-cn.com/problems/corporate-flight-bookings/">1109. 航班预订统计</a></h4><p>难度中等 236</p><p>这里有 <code>n</code> 个航班，它们分别从 <code>1</code> 到 <code>n</code> 进行编号。</p><p>有一份航班预订表 <code>bookings</code> ，表中第 <code>i</code> 条预订记录 <code>bookings[i] = [firsti, lasti, seatsi]</code> 意味着在从 <code>firsti</code> 到 <code>lasti</code> （<strong>包含</strong> <code>firsti</code> 和 <code>lasti</code> ）的 <strong>每个航班</strong> 上预订了 <code>seatsi</code> 个座位。</p><p>请你返回一个长度为 <code>n</code> 的数组 <code>answer</code>，其中 <code>answer[i]</code> 是航班 <code>i</code> 上预订的座位总数。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong>bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5<br><strong>输出：</strong>[10,55,45,25,25]<br><strong>解释：</strong><br>航班编号        1   2   3   4   5<br>预订记录 1 ：   10  10<br>预订记录 2 ：       20  20<br>预订记录 3 ：       25  25  25  25<br>总座位数：      10  55  45  25  25<br>因此，answer = [10,55,45,25,25]</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong>bookings = [[1,2,10],[2,2,15]], n = 2<br><strong>输出：</strong>[10,25]<br><strong>解释：</strong><br>航班编号        1   2<br>预订记录 1 ：   10  10<br>预订记录 2 ：       15<br>总座位数：      10  25<br>因此，answer = [10,25]</p><p><strong>提示：</strong></p><ul><li>  <code>1 &lt;= n &lt;= 2 * 104</code></li><li>  <code>1 &lt;= bookings.length &lt;= 2 * 104</code></li><li>  <code>bookings[i].length == 3</code></li><li>  <code>1 &lt;= firsti &lt;= lasti &lt;= n</code></li><li>  <code>1 &lt;= seatsi &lt;= 104</code></li></ul><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li><p>暴力</p><p>  时间复杂度为O(N^2^)。</p></li><li><p>观察实例：</p><p>  航班编号             1    2    3    4    5<br>  预订记录 1 ：   10  10<br>  预订记录 2 ：          20  20<br>  预订记录 3 ：         25   25  25  25<br>  总座位数：        10  55  45  25   25</p><p>  如果是对于bookings或者n分别进行嵌套循环的话，复杂度也是O(N^2^)，不可接受。因此思考O(N)的方法。</p><p>  对于first<del>i</del> ,last<del>i</del> ，可以发现每个seat<del>i</del>都要加载first<del>i</del>的位置，之后复制就可以了，在last<del>i</del>之后的位置减去seat<del>i</del>。因此可以先对数组进行遍历使得结果数组res在每个first出现的位置都加上seat，在每个last的后一个位置减去seat。最后进行前缀累加即可。</p></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">corpFlightBookings</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; bookings, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;bookings.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            res[bookings[i][<span class="number">0</span>]<span class="number">-1</span>] += bookings[i][<span class="number">2</span>];</span><br><span class="line">            res[bookings[i][<span class="number">1</span>]] -= bookings[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">            res[j] += res[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数组 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>528-按权重随机选择</title>
      <link href="/2021/08/30/528-%E6%8C%89%E6%9D%83%E9%87%8D%E9%9A%8F%E6%9C%BA%E9%80%89%E6%8B%A9/"/>
      <url>/2021/08/30/528-%E6%8C%89%E6%9D%83%E9%87%8D%E9%9A%8F%E6%9C%BA%E9%80%89%E6%8B%A9/</url>
      
        <content type="html"><![CDATA[<h4 id="528-按权重随机选择"><a href="#528-按权重随机选择" class="headerlink" title="528. 按权重随机选择"></a><a href="https://leetcode-cn.com/problems/random-pick-with-weight/">528. 按权重随机选择</a></h4><p>给定一个正整数数组 <code>w</code> ，其中 <code>w[i]</code> 代</p><p>表下标 <code>i</code> 的权重（下标从 <code>0</code> 开始），请写一个函数 <code>pickIndex</code> ，它可以随机地获取下标 <code>i</code>，选取下标 <code>i</code> 的概率与 <code>w[i]</code> 成正比。</p><p>例如，对于 <code>w = [1, 3]</code>，挑选下标 <code>0</code> 的概率为 <code>1 / (1 + 3) = 0.25</code> （即，25%），而选取下标 <code>1</code> 的概率为 <code>3 / (1 + 3) = 0.75</code>（即，75%）。</p><p>也就是说，选取下标 <code>i</code> 的概率为 <code>w[i] / sum(w)</code> 。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong><br>        [“Solution”,”pickIndex”]<br>        [[[1]],[]]<br>        <strong>输出：</strong><br>        [null,0]<br>        <strong>解释：</strong><br>        Solution solution = new Solution([1]);<br>        solution.pickIndex(); // 返回 0，因为数组中只有一个元素，所以唯一的选择是返回下标 0。</p><p><strong>示例 2</strong></p><p><strong>输入：</strong><br>        [“Solution”,”pickIndex”,”pickIndex”,”pickIndex”,”pickIndex”,”pickIndex”]<br>        [[[1,3]],[],[],[],[],[]]<br>        <strong>输出：</strong><br>        [null,1,1,1,1,0]<br>        <strong>解释：</strong><br>        Solution solution = new Solution([1, 3]);<br>        solution.pickIndex(); // 返回 1，返回下标 1，返回该下标概率为 3/4 。<br>        solution.pickIndex(); // 返回 1<br>        solution.pickIndex(); // 返回 1<br>        solution.pickIndex(); // 返回 1<br>        solution.pickIndex(); // 返回 0，返回下标 0，返回该下标概率为 1/4 。**</p><p>由于这是一个随机问题，允许多个答案，因此下列输出都可以被认为是正确的:<br>        [null,1,1,1,1,0]<br>        [null,1,1,1,1,1]<br>        [null,1,1,1,0,0]<br>        [null,1,1,1,0,1]<br>        [null,1,0,1,0,0]<br>        ……<br>        诸若此类。</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= w.length &lt;= 10000</code></li><li><code>1 &lt;= w[i] &lt;= 10^5</code></li><li><code>pickIndex</code> 将被调用不超过 <code>10000</code> 次</li></ul><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>随机+二分查找</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; presum;</span><br><span class="line">    <span class="built_in">Solution</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; w) &#123;</span><br><span class="line">        presum.<span class="built_in">resize</span>(w.<span class="built_in">size</span>()+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=w.<span class="built_in">size</span>();i++) presum[i] = presum[i<span class="number">-1</span>]+w[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pickIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rnum = <span class="built_in">rand</span>()%presum.<span class="built_in">back</span>()+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">1</span>, right = presum.<span class="built_in">size</span>()<span class="number">-1</span>,mid;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(presum[mid]&gt;=rnum) right=mid;</span><br><span class="line">            <span class="keyword">else</span> left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 二分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数组 </tag>
            
            <tag> 随机 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>927-三等分</title>
      <link href="/2021/08/30/927-%E4%B8%89%E7%AD%89%E5%88%86/"/>
      <url>/2021/08/30/927-%E4%B8%89%E7%AD%89%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h4 id="927-三等分"><a href="#927-三等分" class="headerlink" title="927. 三等分"></a><a href="https://leetcode-cn.com/problems/three-equal-parts/">927. 三等分</a></h4><p>难度困难 51</p><p>给定一个由 <code>0</code> 和 <code>1</code> 组成的数组 <code>A</code>，将数组分成 3 个非空的部分，使得所有这些部分表示相同的二进制值。</p><p>如果可以做到，请返回<strong>任何</strong> <code>[i, j]</code>，其中 <code>i+1 &lt; j</code>，这样一来：</p><ul><li>  <code>A[0], A[1], ..., A[i]</code> 组成第一部分；</li><li>  <code>A[i+1], A[i+2], ..., A[j-1]</code> 作为第二部分；</li><li>  <code>A[j], A[j+1], ..., A[A.length - 1]</code> 是第三部分。</li><li>  这三个部分所表示的二进制值相等。</li></ul><p>如果无法做到，就返回 <code>[-1, -1]</code>。</p><p>注意，在考虑每个部分所表示的二进制时，应当将其看作一个整体。例如，<code>[1,1,0]</code> 表示十进制中的 <code>6</code>，而不会是 <code>3</code>。此外，前导零也是被允许的，所以 <code>[0,1,1]</code> 和 <code>[1,1]</code> 表示相同的值。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong>[1,0,1,0,1]<br>        <strong>输出：</strong>[0,3]</p><p><strong>示例 2：</strong></p><p><strong>输出：</strong>[1,1,0,1,1]<br>        <strong>输出：</strong>[-1,-1]</p><p><strong>提示：</strong></p><ol><li> <code>3 &lt;= A.length &lt;= 30000</code></li><li> <code>A[i] == 0</code> 或 <code>A[i] == 1</code></li></ol><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>每组1的数目肯定相等。于是先统计1的位置并保存为bit，之后看bit的长度是否大于3、是否能被3整除。</p><p>能被3整除的情况下，分成三分，每份为<code>t</code>。每一份中1肯定都是t个，前缀0可以忽略，因此应该看后缀0有多少。前两份的前缀0和后面的后缀0混合在一起，可以自由组合，因此先不看。只看第3份的后缀0。如果第3份的后缀0个数比前两份之间的都多，也是不行的。在第三分的后缀0个数小于1、2和2、3之间的0的个数的时候，分别从第1份最后一个1后面延伸相应个数的0、第2份最后一个1后面延伸相应个数的0，返回位置即为答案。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">threeEqualParts</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; bit;</span><br><span class="line">        <span class="keyword">int</span> len = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.<span class="built_in">size</span>();i++)</span><br><span class="line">        <span class="keyword">if</span>(arr[i]==<span class="number">1</span>)</span><br><span class="line">        bit.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(bit.<span class="built_in">size</span>()%<span class="number">3</span>) <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(bit.<span class="built_in">empty</span>()) <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> t = bit.<span class="built_in">size</span>()/<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> back_zero = len - <span class="number">1</span> - bit.<span class="built_in">back</span>();</span><br><span class="line">        <span class="keyword">if</span>(back_zero&gt;bit[<span class="number">2</span>*t]-bit[<span class="number">2</span>*t<span class="number">-1</span>]<span class="number">-1</span>||back_zero&gt;bit[t]-bit[t<span class="number">-1</span>]<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">first</span><span class="params">(bit.begin(),bit.begin()+t)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">second</span><span class="params">(bit.begin()+t,bit.begin()+<span class="number">2</span>*t)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">third</span><span class="params">(bit.begin()+<span class="number">2</span>*t,bit.end())</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=t<span class="number">-1</span>;i&gt;<span class="number">0</span>;--i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(first[i]-first[i<span class="number">-1</span>]!=second[i]-second[i<span class="number">-1</span>]||</span><br><span class="line">            first[i]-first[i<span class="number">-1</span>]!=third[i]-third[i<span class="number">-1</span>]) </span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = bit[t<span class="number">-1</span>]+back_zero;</span><br><span class="line">        <span class="keyword">int</span> j = bit[<span class="number">2</span>*t<span class="number">-1</span>]+back_zero+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;i,j&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 分治 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数组 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1588-所有奇数长度子数组的和</title>
      <link href="/2021/08/29/1588-%E6%89%80%E6%9C%89%E5%A5%87%E6%95%B0%E9%95%BF%E5%BA%A6%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E5%92%8C/"/>
      <url>/2021/08/29/1588-%E6%89%80%E6%9C%89%E5%A5%87%E6%95%B0%E9%95%BF%E5%BA%A6%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个正整数数组 arr ，请你计算所有可能的奇数长度子数组的和。</p><p>子数组 定义为原数组中的一个连续子序列。</p><p>请你返回 arr 中 所有奇数长度子数组的和 。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><p>输入：arr = [1,4,2,5,3]<br>        输出：58<br>        解释：所有奇数长度子数组和它们的和为：<br>        [1] = 1<br>        [4] = 4<br>        [2] = 2<br>        [5] = 5<br>        [3] = 3<br>        [1,4,2] = 7<br>        [4,2,5] = 11<br>        [2,5,3] = 10<br>        [1,4,2,5,3] = 15<br>        我们将所有值求和得到 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58</p><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><p>输入：arr = [1,2]<br>        输出：3<br>        解释：总共只有 2 个长度为奇数的子数组，[1] 和 [2]。它们的和为 3 。</p><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><p>输入：arr = [10,11,12]<br>        输出：66</p><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><p>1 &lt;= arr.length &lt;= 100<br>        1 &lt;= arr[i] &lt;= 1000</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li><p>暴力</p></li><li><p>统计次数，运用乘法</p><p>  对于<code>arr[i]</code> ，在包含<code>arr[i]</code>的前提下，其左侧有i+1个数字，右侧有arr.size()-i个数字。</p><p>  如果左边分别取0、2、4、8……等偶数个临近数字作为一组，右边则也应该取偶数长度的数字作为一组，这样合并后正好是奇数个长度。因此<code>arr[i]</code>在这种条件下会加<code>(i+1+1)/2*(arr.size()-i+1)/2</code>次。这个公式可以通过带入几个数字找到规律。</p><p>  如果左边分别取1、3、5、7……等奇数个临近数字作为一组，右边也应该取奇数长度的数字作为一组，这样合并吼正好是奇数个长度。因此<code>arr[i]</code>在这种条件下会加<code>(i+1)/2*(arr.size()-i)/2</code>次。这个公式可以通过带入几个数字找到规律。</p><p>  解释下<code>(i+1+1)/2*(arr.size()-i+1)/2</code>：</p><ul><li>对于<code>i</code>为奇数的情况：左边可以有0、2、4……i+1总共<code>(i+2)/2</code>个情况。</li><li>对于<code>i</code>为偶数的情况：左边可以有0、2、4……i个总共<code>i/2+1</code>个。</li></ul><p>  以上可以统一为<code>(i+2)/2</code>。</p><p>  奇数同理。</p></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumOddLengthSubarrays</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> leftOdd = (i+<span class="number">2</span>)/<span class="number">2</span>,leftEven = (i+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> rightOdd = (arr.<span class="built_in">size</span>()-i+<span class="number">1</span>)/<span class="number">2</span>,rightEven=(arr.<span class="built_in">size</span>()-i)/<span class="number">2</span>;</span><br><span class="line">            s+=(leftOdd*rightOdd+leftEven*rightEven)*arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 分治 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数组 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>233. 数字 1 的个数</title>
      <link href="/2021/08/13/233-%E6%95%B0%E5%AD%97-1-%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
      <url>/2021/08/13/233-%E6%95%B0%E5%AD%97-1-%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/number-of-digit-one/">233. 数字 1 的个数 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给定一个整数 <code>n</code>，计算所有小于等于 <code>n</code> 的非负整数中数字 <code>1</code> 出现的个数。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 13</span><br><span class="line">输出：6</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= n &lt;= 2 * 10^9</code></li></ul><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>是一个递推的问题。</p><h2 id="方法一：直接递推"><a href="#方法一：直接递推" class="headerlink" title="方法一：直接递推"></a>方法一：直接递推</h2><p>假设输入为 a*10^n^+b </p><p><strong>中间情况：</strong></p><p>只要递归：$$ f( a*10^n+b ) = f(b) + f ( a * 10^n-1 ) $$即可。</p><p><strong>边界条件：</strong> </p><p>$$ f(x)=\left{ \begin {aligned} &amp; 0,x&lt;1\&amp;1,1&lt;=x&lt;10 } \end {aligned} \right. $$</p><p>本方法会<strong>超时</strong></p><h2 id="方法二：避免重复计算"><a href="#方法二：避免重复计算" class="headerlink" title="方法二：避免重复计算"></a>方法二：避免重复计算</h2><p>在<br>$$a*10^n+b$$<br>中，</p><ul><li><p>如果<code>a&gt;2</code>，在计算完<code>b</code>之后，需要计算a*10^n^-1。</p><p>  容易发现：</p><p>  当<code>a&gt;2</code> 的时候，在<code>2~a</code>之间由于最高位都不是1，因此都是计算10^n-1^，可以合并为计算一次10^n-1^，之后乘上<code>a-2</code> 倍。</p><p>  当<code>a==2</code>的时候，计算2*10^n-1^，即计算与$$a*10^n+b$$ 相同位数，不过最高为是1时候的总的1的个数。</p><p>  计算<code>a-2</code>个<code>b</code>可以合并为计算一个<code>b</code>之后乘上<code>a-2</code>，之后在计算2*10^n-1^即可。</p></li><li><p>如果<code>a==1</code>：</p><p>  数字为$$10^n+b$$ ，首先有<code>b+1</code>个数字至少包含一个1，也就是不小于$$10^n$$的部分最高位包含1的个数，之后递归计算<code>b</code>，算出来不小于10^n^部分包含的所有的1，在计算10^n^-1内的1的个数即可。</p></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countDigitOne</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">10</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> a = n,e=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(a/<span class="number">10</span>)&#123;</span><br><span class="line">            a/=<span class="number">10</span>;</span><br><span class="line">            e*=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> b = n - a*e;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">1</span>) <span class="keyword">return</span> b+<span class="number">1</span>+<span class="built_in">countDigitOne</span>(b)+<span class="built_in">countDigitOne</span>(e<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">countDigitOne</span>(b)+<span class="built_in">countDigitOne</span>(<span class="number">2</span>*e<span class="number">-1</span>)+(a<span class="number">-2</span>)*<span class="built_in">countDigitOne</span>(e<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.两数之和</title>
      <link href="/2021/08/13/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2021/08/13/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em>  的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong>nums = [2,7,11,15], target = 9<br><strong>输出：</strong>[0,1]<br><strong>解释：</strong>因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong>nums = [3,2,4], target = 6<br><strong>输出：</strong>[1,2]</p><p><strong>示例 3：</strong></p><p><strong>输入：</strong>nums = [3,3], target = 6<br><strong>输出：</strong>[0,1]</p><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li><li><strong>只会存在一个有效答案</strong></li></ul><p><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n2)</code> 的算法吗？</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>最简单的暴力，复杂度O(N^2)</li><li>使用Hash，复杂度O(NlogN)。使用unordered_map来实现已经logN级别的搜索。</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ol><li><p>暴力解法</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=nums.<span class="built_in">size</span>()<span class="number">-1</span>;j&gt;i;j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;i,j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>Hash解法</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">auto</span> f = m.<span class="built_in">find</span>(target-nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(f!=m.<span class="built_in">end</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="built_in">min</span>(i,f-&gt;second),<span class="built_in">max</span>(i,f-&gt;second)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            m[nums[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数学 </tag>
            
            <tag> 力扣简单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.两数相加</title>
      <link href="/2021/08/13/2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
      <url>/2021/08/13/2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg" alt=""></p><p><strong>输入：</strong>l1 = [2,4,3], l2 = [5,6,4]<br><strong>输出：</strong>[7,0,8]<br><strong>解释：</strong>342 + 465 = 807.</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong>l1 = [0], l2 = [0]<br><strong>输出：</strong>[0]</p><p><strong>示例 3：</strong></p><p><strong>输入：</strong>l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br><strong>输出：</strong>[8,9,9,9,0,0,0,1]</p><p><strong>提示：</strong></p><ul><li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>题目数据保证列表表示的数字不含前导零</li></ul><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>​    思路比较简单，就是从末尾开始相加，设置一个进位符op，循环结束条件为两个指针都为NULL并且进位符为0。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* head = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        ListNode* point = head;</span><br><span class="line">        <span class="keyword">int</span> op = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="literal">NULL</span>||l2!=<span class="literal">NULL</span>||op==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> v1 = l1==<span class="literal">NULL</span>?<span class="number">0</span>:l1-&gt;val;</span><br><span class="line">            <span class="keyword">int</span> v2 = l2==<span class="literal">NULL</span>?<span class="number">0</span>:l2-&gt;val;</span><br><span class="line">            <span class="keyword">int</span> v = v1 + v2 + op;</span><br><span class="line">            op = v / <span class="number">10</span>;</span><br><span class="line">            head-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(v%<span class="number">10</span>);</span><br><span class="line">            head=head-&gt;next;</span><br><span class="line">            l1 = l1==<span class="literal">NULL</span>?<span class="literal">NULL</span>:l1-&gt;next;</span><br><span class="line">            l2 = l2==<span class="literal">NULL</span>?<span class="literal">NULL</span>:l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> point-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数学 </tag>
            
            <tag> 力扣简单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>337.打家劫舍III</title>
      <link href="/2021/08/13/337-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%20III/"/>
      <url>/2021/08/13/337-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%20III/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。</p><p>计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p><p><strong>示例 1:</strong></p><p><strong>输入:</strong> [3,2,3,null,3,null,1]</p><pre><code> 3/ \\2   3\   \ 3   1</code></pre><p><strong>输出:</strong> 7<br><strong>解释:</strong> 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = <strong>7</strong>.</p><p><strong>示例 2:</strong></p><p><strong>输入:</strong> [3,4,5,1,3,null,1]</p><pre><code>     3    / \   4   5  / \   \ 1   3   1</code></pre><p><strong>输出:</strong> 9<br><strong>解释:</strong> 小偷一晚能够盗取的最高金额 = <strong>4</strong> + <strong>5</strong> = <strong>9</strong>.</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>dp真的不会啊，用了层次遍历。为了防止TLE用一个unordered_map来存储已经遍历过的节点,如果直接存在就使用，不存在则将当前的node算出以其为root的最大值，加入到map中。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;TreeNode*,<span class="keyword">int</span>&gt; m;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(TreeNode* node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(m.<span class="built_in">find</span>(node)!=m.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="keyword">return</span> m[node];</span><br><span class="line">        &#125;</span><br><span class="line">        m[node]=<span class="built_in">rob</span>(node);</span><br><span class="line">        <span class="keyword">return</span> m[node];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        m[root]=<span class="built_in">max</span>(<span class="built_in">get</span>(root-&gt;left)+<span class="built_in">get</span>(root-&gt;right),</span><br><span class="line">        root-&gt;val+</span><br><span class="line">        (root-&gt;left==<span class="literal">NULL</span>?<span class="number">0</span>:<span class="built_in">get</span>(root-&gt;left-&gt;left)+<span class="built_in">get</span>(root-&gt;left-&gt;right))+</span><br><span class="line">        (root-&gt;right==<span class="literal">NULL</span>?<span class="number">0</span>:<span class="built_in">get</span>(root-&gt;right-&gt;left)+<span class="built_in">get</span>(root-&gt;right-&gt;right)));</span><br><span class="line">        <span class="keyword">return</span> m[root];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>142. 环形链表 II</title>
      <link href="/2021/08/13/142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-II/"/>
      <url>/2021/08/13/142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-II/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。</p><p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意，<code>pos</code> 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</strong></p><p><strong>说明：</strong>不允许修改给定的链表。</p><p><strong>进阶：</strong></p><ul><li>  你是否可以使用 <code>O(1)</code> 空间解决此题？</li></ul><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png"></p><p><strong>输入：</strong>head = [3,2,0,-4], pos = 1<br><strong>输出：</strong>返回索引为 1 的链表节点<br><strong>解释：</strong>链表中有一个环，其尾部连接到第二个节点。</p><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png"></p><p><strong>输入：</strong>head = [1,2], pos = 0<br><strong>输出：</strong>返回索引为 0 的链表节点<br><strong>解释：</strong>链表中有一个环，其尾部连接到第一个节点。</p><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png"></p><p><strong>输入：</strong>head = [1], pos = -1<br><strong>输出：</strong>返回 null<br><strong>解释：</strong>链表中没有环。</p><p><strong>提示：</strong></p><ul><li>  链表中节点的数目范围在范围 <code>[0, 104]</code> 内</li><li>  <code>-105 &lt;= Node.val &lt;= 105</code></li><li>  <code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li></ul><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>就是暴力<br>1.先通过两个从头开始的指针，一个一次走一步，一个一次走两步，看两者能不能相遇，以此来确定有没有环，如果没有环直接返回NULL，有环则记录下两个指针相等的位置n1.<br>2.如果有环，那么环的头节点一定在head到n1之间，那么只需要再head和n1之间便利，从head往后一个一个开始，看看循环1~2圈只能能不能回到起始节点，如果可以那么证明事头节点，如果不行就往后。直到找到。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* n1,*n2;</span><br><span class="line">        n1=head;</span><br><span class="line">        n2=head-&gt;next;</span><br><span class="line">        <span class="comment">// if(n1==NULL||n2==NULL||n2-&gt;next==NULL) return NULL;</span></span><br><span class="line">        <span class="keyword">while</span>(n1!=n2)&#123;</span><br><span class="line">            <span class="comment">// printf(&quot;n1:%d n2:%d\n&quot;,n1-&gt;val,n2-&gt;val);</span></span><br><span class="line">            <span class="keyword">if</span>(n2==<span class="literal">NULL</span>||n2-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            n2=n2-&gt;next-&gt;next;</span><br><span class="line">            n1=n1-&gt;next;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//再head和n1之间存在环，从一个节点开始，到n1结束</span></span><br><span class="line">        ListNode* h=head;</span><br><span class="line">        <span class="comment">//h肯定在h~n1之间，看h到n1之前的节点是不是一样，前面有就在前面，前面没有就是n1</span></span><br><span class="line">        <span class="keyword">while</span>(h!=n1)&#123;</span><br><span class="line">            <span class="keyword">bool</span> finded=<span class="literal">false</span>;</span><br><span class="line">            ListNode* ch=h-&gt;next;</span><br><span class="line">            <span class="keyword">while</span>(ch!=h)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ch==n1)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(finded)&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        finded=<span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ch=ch-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ch==h) <span class="keyword">return</span> h;</span><br><span class="line">            <span class="keyword">else</span> h=h-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 链表 </tag>
            
            <tag> 环形链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>216.排列组合 III</title>
      <link href="/2021/08/13/216-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C%20III/"/>
      <url>/2021/08/13/216-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C%20III/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>找出所有相加之和为 <strong><em>n</em></strong> 的 <strong><em>k </em></strong>个数的组合<strong><em>。</em></strong>组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。</p><p><strong>说明：</strong></p><ul><li>所有数字都是正整数。</li><li>解集不能包含重复的组合。</li></ul><p><strong>示例 1:</strong></p><p><strong>输入:</strong> <strong><em>k</em></strong> = 3, <strong><em>n</em></strong> = 7<br><strong>输出:</strong> [[1,2,4]]</p><p><strong>示例 2:</strong></p><p><strong>输入:</strong> <strong><em>k</em></strong> = 3, <strong><em>n</em></strong> = 9<br><strong>输出:</strong> [[1,2,6], [1,3,5], [2,3,4]]</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>别无他长，用暴力吧。<br>从1-9进行遍历，每次遍历从当前遍历到的元素的下一个开始，然后k-1，n-i传入到下次遍历之中。当k=1并且n比当前遍历的元素大而且比9小的时候，返回这个vector<vector<int>&gt;。<br>上层遍历拿到返回的vector<vector<int>&gt;之后，把本层遍历的元素放到首位，然然后加入到自己的结果队列之中。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">combinationSum3</span>(<span class="keyword">int</span> k, <span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getsum</span>(<span class="number">1</span>,k,n);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">getsum</span>(<span class="keyword">int</span> s,<span class="keyword">int</span> k,<span class="keyword">int</span> n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;=<span class="number">0</span>||k&gt;n||s&gt;n) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;=s&amp;&amp;k==<span class="number">1</span>&amp;&amp;n&lt;=<span class="number">9</span>) <span class="keyword">return</span> &#123;&#123;n&#125;&#125;;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=s;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; temp=<span class="built_in">getsum</span>(i+<span class="number">1</span>,k<span class="number">-1</span>,n-i);</span><br><span class="line">            <span class="keyword">for</span>(vector&lt;<span class="keyword">int</span>&gt; t:temp)&#123;</span><br><span class="line">                t.<span class="built_in">insert</span>(t.<span class="built_in">begin</span>(),i);</span><br><span class="line">                v.<span class="built_in">push_back</span>(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 排列组合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数学 </tag>
            
            <tag> 排列组合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>92. 反转链表 II</title>
      <link href="/2021/08/13/92-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8-II/"/>
      <url>/2021/08/13/92-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8-II/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你单链表的头指针 <code>head</code> 和两个整数 <code>left</code> 和 <code>right</code> ，其中 <code>left &lt;= right</code> 。请你反转从位置 <code>left</code> 到位置 <code>right</code> 的链表节点，返回 <strong>反转后的链表</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg"></p><p><strong>输入：</strong>head = [1,2,3,4,5], left = 2, right = 4<br><strong>输出：</strong>[1,4,3,2,5]</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong>head = [5], left = 1, right = 1<br><strong>输出：</strong>[5]</p><p><strong>提示：</strong></p><ul><li>  链表中节点数目为 <code>n</code></li><li>  <code>1 &lt;= n &lt;= 500</code></li><li>  <code>-500 &lt;= Node.val &lt;= 500</code></li><li>  <code>1 &lt;= left &lt;= right &lt;= n</code></li></ul><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>首先找到第一个开始的反转节点<br>反转一个链表须要三个半节点：反转链表的第一个（算半个）pre-&gt;next，反转链表过程中的第一个head，反转链表过程中未反转部分的第一个nxt，反转链表未反转部分的第二个aft。<br>每次让nxt的next只想head，之后head变为nxt，这样即实现了一个节点反转到头节点的过程。之后nxt转为未反转部分的第一个，也即原来的aft，aft后移。<br>全部移动完成后，须要将原来反转链表的第一个pre-&gt;next的next设置为nxt，以此实现反转后的尾节点与后续节点链接。之后pre的next节点设置为反转后的第一个节点head。返回第一个节点即可。<br>为了方便返回第一个节点，这里在头节点前插入新节点。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m==n) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">        ListNode* pre = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        pre-&gt;next = head;</span><br><span class="line">        ListNode* h = pre;</span><br><span class="line">        <span class="keyword">while</span>(cnt&lt;m)&#123;</span><br><span class="line">            pre=head;</span><br><span class="line">            head=head-&gt;next;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* nxt=head-&gt;next,*aft=head-&gt;next-&gt;next,*lst = head;</span><br><span class="line">        <span class="keyword">while</span>(cnt&lt;n)&#123;</span><br><span class="line">            nxt-&gt;next = head;</span><br><span class="line">            head=nxt;</span><br><span class="line">            nxt=aft;</span><br><span class="line">            <span class="keyword">if</span>(aft)aft=aft-&gt;next;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        pre-&gt;next-&gt;next = nxt;</span><br><span class="line">        pre-&gt;next = head;</span><br><span class="line">        <span class="keyword">return</span> h-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>516.最长回文子序列</title>
      <link href="/2021/08/13/516-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>/2021/08/13/516-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/">516. 最长回文子序列 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给你一个字符串 <code>s</code> ，找出其中最长的回文子序列，并返回该序列的长度。</p><p>子序列定义为：不改变剩余字符顺序的情况下，删除某些字符或者不删除任何字符形成的一个序列.</p><p><strong>实例1:</strong></p><p>输入：s = “bbbab”<br>        输出：4<br>        解释：一个可能的最长回文子序列为 “bbbb” 。</p><p><strong>示例 2：</strong></p><p>输入：s = “cbbd”<br>        输出：2<br>        解释：一个可能的最长回文子序列为 “bb” 。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li><p>马拉车</p><p>  马拉车算法用来解决最长回文字串的问题是最先想到的思路，但是本地比较特殊的一点在于，可以删除。如果分别删除，复杂度会太大，因此排除使用马拉车算法的思路。</p></li><li><p>动态规划</p><p>  设置数组<code>dp</code>，<code>dp[i][j]</code>代表从<code>s[i]</code> 到<code>s[j] </code>的最长回文字串长度。</p><p>  <strong>初始状态：</strong> <code>dp[i][i]=1</code> </p><p>  <strong>中间状态：</strong>对于任意<code>i,j 0&lt;=i&lt;j&lt;n</code>，其中任意字串的长度都已经通过循环获得。这里让<code>j</code>从0开始循环的，因此<code>0~j-1</code>内的所有字串的最大回文长度都已经知道，从<code>0~j</code>相当于在此基础上在最后一位上加上了<code>s[j]</code>。令<code>i</code>从<code>j-1</code>开始向<code>0 </code>循环，这样整体的长度才是从小往大：</p><ul><li><p>如果<code>s[i]==s[j]</code>，那么就是<code>i+1~j-1</code>内最大的回文字串长度加上2：</p>  <center><code>dp[i][j]=dp[i+1][j-1]+2</code></center>如果`s[i]==s[j]`但是`dp[i+1][j-1]`并不是从`i+1`开始到`j-1`结束的回文字串呢？没有关系，中间的可以都删除，因此只需要保存最长的长度即可。  </li></ul></li><li><p>如果<code>s[i]!=s[j]</code>，那么只需要<code>dp[i][j]</code>设置为<code>i~j-1</code>和<code>i+1~j</code>中的最长回文字串长度即可：</p>  <center><code>dp[i][j]=max(dp[i][j-1],dp[i+1][j])</code></center></li></ul><p>由于是从头往后开始遍历的，因此遍历到<code>i</code>的时候再将<code>dp[i][j]</code>设置为<code>1</code>即可。</p><p><strong>结果：</strong><code> dp[i][j]</code>代表从<code>s[i]</code> 到<code>s[j] </code>的最长回文字串长度。因此<code>s</code>从<code>0</code>到<code>n-1</code>的最长回文字串长度就是<code>dp[0][n-1]</code>。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestPalindromeSubseq</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">int</span> dp[n][n];</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)*n*n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            dp[i][i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i]==s[j])&#123;</span><br><span class="line">                    dp[j][i] = dp[j+<span class="number">1</span>][i<span class="number">-1</span>]+<span class="number">2</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[j][i] = <span class="built_in">max</span>(dp[j][i<span class="number">-1</span>],dp[j+<span class="number">1</span>][i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
