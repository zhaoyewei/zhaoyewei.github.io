<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>KMP简洁模板</title>
      <link href="/2021/09/04/KMP%E7%AE%80%E6%B4%81%E6%A8%A1%E6%9D%BF/"/>
      <url>/2021/09/04/KMP%E7%AE%80%E6%B4%81%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(needle.<span class="built_in">size</span>()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>* nxt = <span class="keyword">new</span> <span class="keyword">int</span>[needle.<span class="built_in">length</span>()];</span><br><span class="line">    <span class="built_in">getNext</span>(needle,nxt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;haystack.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;haystack[i]!=needle[j]) j = nxt[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(haystack[i]==needle[j]) j++;</span><br><span class="line">        <span class="keyword">if</span>(j==needle.<span class="built_in">size</span>()) <span class="keyword">return</span> i-j+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(string pat,<span class="keyword">int</span>* nxt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pLen = pat.<span class="built_in">length</span>();</span><br><span class="line">    nxt[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,j = <span class="number">0</span>;i&lt;pLen;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;pat[i]!=pat[j]) j=nxt[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(pat[i]==pat[j]) j++;</span><br><span class="line">        nxt[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 模板 </category>
          
          <category> 字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>198.打家劫舍</title>
      <link href="/2021/09/04/198-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/"/>
      <url>/2021/09/04/198-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>不触动警报装置的情况下</strong> ，一夜之内能够偷窃到的最高金额。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong>[1,2,3,1]<br><strong>输出：</strong>4<br><strong>解释：</strong>偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。<br>     偷窃到的最高金额 = 1 + 3 = 4 。</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong>[2,7,9,3,1]<br><strong>输出：</strong>12<br><strong>解释：</strong>偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。<br>     偷窃到的最高金额 = 2 + 9 + 1 = 12 。</p><p><strong>提示：</strong></p><ul><li>  <code>1 &lt;= nums.length &lt;= 100</code></li><li>  <code>0 &lt;= nums[i] &lt;= 400</code></li></ul><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>动态规划入门：</p><p><code>dp[i]=max(dp[i-1],nums[i]+dp[i-2])</code></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(nums.size()+<span class="number">2</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            dp[i+<span class="number">2</span>] = <span class="built_in">max</span>(nums[i] + dp[i],dp[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1986.完成任务的最少工作时间段</title>
      <link href="/2021/09/04/1986-%E5%AE%8C%E6%88%90%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%9C%80%E5%B0%91%E5%B7%A5%E4%BD%9C%E6%97%B6%E9%97%B4%E6%AE%B5/"/>
      <url>/2021/09/04/1986-%E5%AE%8C%E6%88%90%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%9C%80%E5%B0%91%E5%B7%A5%E4%BD%9C%E6%97%B6%E9%97%B4%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>你被安排了 <code>n</code> 个任务。任务需要花费的时间用长度为 <code>n</code> 的整数数组 <code>tasks</code> 表示，第 <code>i</code> 个任务需要花费 <code>tasks[i]</code> 小时完成。一个 <strong>工作时间段</strong> 中，你可以 <strong>至多</strong> 连续工作 <code>sessionTime</code> 个小时，然后休息一会儿。</p><p>你需要按照如下条件完成给定任务：</p><ul><li>  如果你在某一个时间段开始一个任务，你需要在 <strong>同一个</strong> 时间段完成它。</li><li>  完成一个任务后，你可以 <strong>立马</strong> 开始一个新的任务。</li><li>  你可以按 <strong>任意顺序</strong> 完成任务。</li></ul><p>给你 <code>tasks</code> 和 <code>sessionTime</code> ，请你按照上述要求，返回完成所有任务所需要的 <strong>最少</strong> 数目的 <strong>工作时间段</strong> 。</p><p>测试数据保证 <code>sessionTime</code> <strong>大于等于</strong> <code>tasks[i]</code> 中的 <strong>最大值</strong> 。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong>tasks = [1,2,3], sessionTime = 3<br><strong>输出：</strong>2<br><strong>解释：</strong>你可以在两个工作时间段内完成所有任务。</p><ul><li>第一个工作时间段：完成第一和第二个任务，花费 1 + 2 = 3 小时。</li><li>第二个工作时间段：完成第三个任务，花费 3 小时。</li></ul><p><strong>示例 2：</strong></p><p><strong>输入：</strong>tasks = [3,1,3,1,1], sessionTime = 8<br><strong>输出：</strong>2<br><strong>解释：</strong>你可以在两个工作时间段内完成所有任务。</p><ul><li>第一个工作时间段：完成除了最后一个任务以外的所有任务，花费 3 + 1 + 3 + 1 = 8 小时。</li><li>第二个工作时间段，完成最后一个任务，花费 1 小时。</li></ul><p><strong>示例 3：</strong></p><p><strong>输入：</strong>tasks = [1,2,3,4,5], sessionTime = 15<br><strong>输出：</strong>1<br><strong>解释：</strong>你可以在一个工作时间段以内完成所有任务。</p><p><strong>提示：</strong></p><ul><li>  <code>n == tasks.length</code></li><li>  <code>1 &lt;= n &lt;= 14</code></li><li>  <code>1 &lt;= tasks[i] &lt;= 10</code></li><li>  <code>max(tasks[i]) &lt;= sessionTime &lt;= 15</code></li></ul><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>其实没有思路，看别人的题解知道了状压DP这个东西，于是照抄了代码，学习了一个新的知识点</p><ul><li><p>首先初始化dp，该类题一般最大值小于20，因此dp初始值设为20。dp的数量设置为所有可能出现的情况之和：2^(n+1)^-1。</p></li><li><p>dp初始值更新：</p><ul><li>将第i个状态转化为二进制数字，二进制数字的每一位代表该位对应的task是否添加。比如10100表示task[2]和task[4]添加进来。</li><li>将每个二进制数字对应的task之和求出，如果小于sessionTime，则将该位置的dp设为1。表示该状态下可以安排进同一个sessionTime中。</li></ul></li><li><p>dp全局更新：</p><ul><li><p>从小到大遍历1~2^(n+1)^-1个状态，对于每个状态i，同时遍历其子集：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&gt;<span class="number">0</span>;j=(j<span class="number">-1</span>)&amp;i)&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于每个状态i，取该状态dp[i]和其子集状态dp[j]+dp[i^j]的最小值。</p></li></ul></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSessions</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; tasks, <span class="keyword">int</span> sessionTime)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//状压DP</span></span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1</span>&lt;&lt;(tasks.<span class="built_in">size</span>());</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n,<span class="number">20</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> spend = <span class="number">0</span>, cur = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> idx=<span class="number">0</span>;cur&gt;&gt;idx&gt;<span class="number">0</span>;idx++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cur&amp;(<span class="number">1</span>&lt;&lt;idx)) spend+= tasks[idx];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(spend&lt;=sessionTime)dp[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&gt;<span class="number">0</span>;j=(j<span class="number">-1</span>)&amp;i)&#123;</span><br><span class="line">                dp[i] = <span class="built_in">min</span>(dp[i],dp[j]+dp[i^j]);</span><br><span class="line">                <span class="keyword">if</span>(dp[i]==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数组 </tag>
            
            <tag> DP </tag>
            
            <tag> 状压DP </tag>
            
            <tag> 新知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>240-搜索二维矩阵 II</title>
      <link href="/2021/09/03/240-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5-II/"/>
      <url>/2021/09/03/240-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5-II/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1109-航班预订统计</title>
      <link href="/2021/08/31/1109-%E8%88%AA%E7%8F%AD%E9%A2%84%E8%AE%A2%E7%BB%9F%E8%AE%A1/"/>
      <url>/2021/08/31/1109-%E8%88%AA%E7%8F%AD%E9%A2%84%E8%AE%A2%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h4 id="1109-航班预订统计"><a href="#1109-航班预订统计" class="headerlink" title="1109. 航班预订统计"></a><a href="https://leetcode-cn.com/problems/corporate-flight-bookings/">1109. 航班预订统计</a></h4><p>难度中等 236</p><p>这里有 <code>n</code> 个航班，它们分别从 <code>1</code> 到 <code>n</code> 进行编号。</p><p>有一份航班预订表 <code>bookings</code> ，表中第 <code>i</code> 条预订记录 <code>bookings[i] = [firsti, lasti, seatsi]</code> 意味着在从 <code>firsti</code> 到 <code>lasti</code> （<strong>包含</strong> <code>firsti</code> 和 <code>lasti</code> ）的 <strong>每个航班</strong> 上预订了 <code>seatsi</code> 个座位。</p><p>请你返回一个长度为 <code>n</code> 的数组 <code>answer</code>，其中 <code>answer[i]</code> 是航班 <code>i</code> 上预订的座位总数。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong>bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5<br><strong>输出：</strong>[10,55,45,25,25]<br><strong>解释：</strong><br>航班编号        1   2   3   4   5<br>预订记录 1 ：   10  10<br>预订记录 2 ：       20  20<br>预订记录 3 ：       25  25  25  25<br>总座位数：      10  55  45  25  25<br>因此，answer = [10,55,45,25,25]</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong>bookings = [[1,2,10],[2,2,15]], n = 2<br><strong>输出：</strong>[10,25]<br><strong>解释：</strong><br>航班编号        1   2<br>预订记录 1 ：   10  10<br>预订记录 2 ：       15<br>总座位数：      10  25<br>因此，answer = [10,25]</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 2 * 104</code></li><li><code>1 &lt;= bookings.length &lt;= 2 * 104</code></li><li><code>bookings[i].length == 3</code></li><li><code>1 &lt;= firsti &lt;= lasti &lt;= n</code></li><li><code>1 &lt;= seatsi &lt;= 104</code></li></ul><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li><p>暴力</p><p>  时间复杂度为O(N^2^)。</p></li><li><p>观察实例：</p><p>  航班编号             1    2    3    4    5<br>  预订记录 1 ：   10  10<br>  预订记录 2 ：          20  20<br>  预订记录 3 ：         25   25  25  25<br>  总座位数：        10  55  45  25   25</p><p>  如果是对于bookings或者n分别进行嵌套循环的话，复杂度也是O(N^2^)，不可接受。因此思考O(N)的方法。</p><p>  对于first~i~ ,last~i~ ，可以发现每个seat~i~都要加载first~i~的位置，之后复制就可以了，在last~i~之后的位置减去seat~i~。因此可以先对数组进行遍历使得结果数组res在每个first出现的位置都加上seat，在每个last的后一个位置减去seat。最后进行前缀累加即可。</p></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">corpFlightBookings</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; bookings, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;bookings.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            res[bookings[i][<span class="number">0</span>]<span class="number">-1</span>] += bookings[i][<span class="number">2</span>];</span><br><span class="line">            res[bookings[i][<span class="number">1</span>]] -= bookings[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">            res[j] += res[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数组 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>528-按权重随机选择</title>
      <link href="/2021/08/30/528-%E6%8C%89%E6%9D%83%E9%87%8D%E9%9A%8F%E6%9C%BA%E9%80%89%E6%8B%A9/"/>
      <url>/2021/08/30/528-%E6%8C%89%E6%9D%83%E9%87%8D%E9%9A%8F%E6%9C%BA%E9%80%89%E6%8B%A9/</url>
      
        <content type="html"><![CDATA[<h4 id="528-按权重随机选择"><a href="#528-按权重随机选择" class="headerlink" title="528. 按权重随机选择"></a><a href="https://leetcode-cn.com/problems/random-pick-with-weight/">528. 按权重随机选择</a></h4><p>给定一个正整数数组 <code>w</code> ，其中 <code>w[i]</code> 代</p><p>表下标 <code>i</code> 的权重（下标从 <code>0</code> 开始），请写一个函数 <code>pickIndex</code> ，它可以随机地获取下标 <code>i</code>，选取下标 <code>i</code> 的概率与 <code>w[i]</code> 成正比。</p><p>例如，对于 <code>w = [1, 3]</code>，挑选下标 <code>0</code> 的概率为 <code>1 / (1 + 3) = 0.25</code> （即，25%），而选取下标 <code>1</code> 的概率为 <code>3 / (1 + 3) = 0.75</code>（即，75%）。</p><p>也就是说，选取下标 <code>i</code> 的概率为 <code>w[i] / sum(w)</code> 。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong><br>        [“Solution”,”pickIndex”]<br>        [[[1]],[]]<br>        <strong>输出：</strong><br>        [null,0]<br>        <strong>解释：</strong><br>        Solution solution = new Solution([1]);<br>        solution.pickIndex(); // 返回 0，因为数组中只有一个元素，所以唯一的选择是返回下标 0。</p><p><strong>示例 2</strong></p><p><strong>输入：</strong><br>        [“Solution”,”pickIndex”,”pickIndex”,”pickIndex”,”pickIndex”,”pickIndex”]<br>        [[[1,3]],[],[],[],[],[]]<br>        <strong>输出：</strong><br>        [null,1,1,1,1,0]<br>        <strong>解释：</strong><br>        Solution solution = new Solution([1, 3]);<br>        solution.pickIndex(); // 返回 1，返回下标 1，返回该下标概率为 3/4 。<br>        solution.pickIndex(); // 返回 1<br>        solution.pickIndex(); // 返回 1<br>        solution.pickIndex(); // 返回 1<br>        solution.pickIndex(); // 返回 0，返回下标 0，返回该下标概率为 1/4 。**</p><p>由于这是一个随机问题，允许多个答案，因此下列输出都可以被认为是正确的:<br>        [null,1,1,1,1,0]<br>        [null,1,1,1,1,1]<br>        [null,1,1,1,0,0]<br>        [null,1,1,1,0,1]<br>        [null,1,0,1,0,0]<br>        ……<br>        诸若此类。</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= w.length &lt;= 10000</code></li><li><code>1 &lt;= w[i] &lt;= 10^5</code></li><li><code>pickIndex</code> 将被调用不超过 <code>10000</code> 次</li></ul><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>随机+二分查找</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; presum;</span><br><span class="line">    <span class="built_in">Solution</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; w) &#123;</span><br><span class="line">        presum.<span class="built_in">resize</span>(w.<span class="built_in">size</span>()+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=w.<span class="built_in">size</span>();i++) presum[i] = presum[i<span class="number">-1</span>]+w[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pickIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rnum = <span class="built_in">rand</span>()%presum.<span class="built_in">back</span>()+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">1</span>, right = presum.<span class="built_in">size</span>()<span class="number">-1</span>,mid;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(presum[mid]&gt;=rnum) right=mid;</span><br><span class="line">            <span class="keyword">else</span> left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数组 </tag>
            
            <tag> 随机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>927-三等分</title>
      <link href="/2021/08/30/927-%E4%B8%89%E7%AD%89%E5%88%86/"/>
      <url>/2021/08/30/927-%E4%B8%89%E7%AD%89%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h4 id="927-三等分"><a href="#927-三等分" class="headerlink" title="927. 三等分"></a><a href="https://leetcode-cn.com/problems/three-equal-parts/">927. 三等分</a></h4><p>难度困难 51</p><p>给定一个由 <code>0</code> 和 <code>1</code> 组成的数组 <code>A</code>，将数组分成 3 个非空的部分，使得所有这些部分表示相同的二进制值。</p><p>如果可以做到，请返回<strong>任何</strong> <code>[i, j]</code>，其中 <code>i+1 &lt; j</code>，这样一来：</p><ul><li><code>A[0], A[1], ..., A[i]</code> 组成第一部分；</li><li><code>A[i+1], A[i+2], ..., A[j-1]</code> 作为第二部分；</li><li><code>A[j], A[j+1], ..., A[A.length - 1]</code> 是第三部分。</li><li>这三个部分所表示的二进制值相等。</li></ul><p>如果无法做到，就返回 <code>[-1, -1]</code>。</p><p>注意，在考虑每个部分所表示的二进制时，应当将其看作一个整体。例如，<code>[1,1,0]</code> 表示十进制中的 <code>6</code>，而不会是 <code>3</code>。此外，前导零也是被允许的，所以 <code>[0,1,1]</code> 和 <code>[1,1]</code> 表示相同的值。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong>[1,0,1,0,1]<br>        <strong>输出：</strong>[0,3]</p><p><strong>示例 2：</strong></p><p><strong>输出：</strong>[1,1,0,1,1]<br>        <strong>输出：</strong>[-1,-1]</p><p><strong>提示：</strong></p><ol><li><code>3 &lt;= A.length &lt;= 30000</code></li><li><code>A[i] == 0</code> 或 <code>A[i] == 1</code></li></ol><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>每组1的数目肯定相等。于是先统计1的位置并保存为bit，之后看bit的长度是否大于3、是否能被3整除。</p><p>能被3整除的情况下，分成三分，每份为<code>t</code>。每一份中1肯定都是t个，前缀0可以忽略，因此应该看后缀0有多少。前两份的前缀0和后面的后缀0混合在一起，可以自由组合，因此先不看。只看第3份的后缀0。如果第3份的后缀0个数比前两份之间的都多，也是不行的。在第三分的后缀0个数小于1、2和2、3之间的0的个数的时候，分别从第1份最后一个1后面延伸相应个数的0、第2份最后一个1后面延伸相应个数的0，返回位置即为答案。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">threeEqualParts</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; bit;</span><br><span class="line">        <span class="keyword">int</span> len = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.<span class="built_in">size</span>();i++)</span><br><span class="line">        <span class="keyword">if</span>(arr[i]==<span class="number">1</span>)</span><br><span class="line">        bit.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(bit.<span class="built_in">size</span>()%<span class="number">3</span>) <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(bit.<span class="built_in">empty</span>()) <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> t = bit.<span class="built_in">size</span>()/<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> back_zero = len - <span class="number">1</span> - bit.<span class="built_in">back</span>();</span><br><span class="line">        <span class="keyword">if</span>(back_zero&gt;bit[<span class="number">2</span>*t]-bit[<span class="number">2</span>*t<span class="number">-1</span>]<span class="number">-1</span>||back_zero&gt;bit[t]-bit[t<span class="number">-1</span>]<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">first</span><span class="params">(bit.begin(),bit.begin()+t)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">second</span><span class="params">(bit.begin()+t,bit.begin()+<span class="number">2</span>*t)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">third</span><span class="params">(bit.begin()+<span class="number">2</span>*t,bit.end())</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=t<span class="number">-1</span>;i&gt;<span class="number">0</span>;--i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(first[i]-first[i<span class="number">-1</span>]!=second[i]-second[i<span class="number">-1</span>]||</span><br><span class="line">            first[i]-first[i<span class="number">-1</span>]!=third[i]-third[i<span class="number">-1</span>]) </span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = bit[t<span class="number">-1</span>]+back_zero;</span><br><span class="line">        <span class="keyword">int</span> j = bit[<span class="number">2</span>*t<span class="number">-1</span>]+back_zero+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;i,j&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数组 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1588-所有奇数长度子数组的和</title>
      <link href="/2021/08/29/1588-%E6%89%80%E6%9C%89%E5%A5%87%E6%95%B0%E9%95%BF%E5%BA%A6%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E5%92%8C/"/>
      <url>/2021/08/29/1588-%E6%89%80%E6%9C%89%E5%A5%87%E6%95%B0%E9%95%BF%E5%BA%A6%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个正整数数组 arr ，请你计算所有可能的奇数长度子数组的和。</p><p>子数组 定义为原数组中的一个连续子序列。</p><p>请你返回 arr 中 所有奇数长度子数组的和 。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><p>输入：arr = [1,4,2,5,3]<br>        输出：58<br>        解释：所有奇数长度子数组和它们的和为：<br>        [1] = 1<br>        [4] = 4<br>        [2] = 2<br>        [5] = 5<br>        [3] = 3<br>        [1,4,2] = 7<br>        [4,2,5] = 11<br>        [2,5,3] = 10<br>        [1,4,2,5,3] = 15<br>        我们将所有值求和得到 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58</p><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><p>输入：arr = [1,2]<br>        输出：3<br>        解释：总共只有 2 个长度为奇数的子数组，[1] 和 [2]。它们的和为 3 。</p><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><p>输入：arr = [10,11,12]<br>        输出：66</p><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><p>1 &lt;= arr.length &lt;= 100<br>        1 &lt;= arr[i] &lt;= 1000</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li><p>暴力</p></li><li><p>统计次数，运用乘法</p><p>  对于<code>arr[i]</code> ，在包含<code>arr[i]</code>的前提下，其左侧有i+1个数字，右侧有arr.size()-i个数字。</p><p>  如果左边分别取0、2、4、8……等偶数个临近数字作为一组，右边则也应该取偶数长度的数字作为一组，这样合并后正好是奇数个长度。因此<code>arr[i]</code>在这种条件下会加<code>(i+1+1)/2*(arr.size()-i+1)/2</code>次。这个公式可以通过带入几个数字找到规律。</p><p>  如果左边分别取1、3、5、7……等奇数个临近数字作为一组，右边也应该取奇数长度的数字作为一组，这样合并吼正好是奇数个长度。因此<code>arr[i]</code>在这种条件下会加<code>(i+1)/2*(arr.size()-i)/2</code>次。这个公式可以通过带入几个数字找到规律。</p><p>  解释下<code>(i+1+1)/2*(arr.size()-i+1)/2</code>：</p><ul><li>对于<code>i</code>为奇数的情况：左边可以有0、2、4……i+1总共<code>(i+2)/2</code>个情况。</li><li>对于<code>i</code>为偶数的情况：左边可以有0、2、4……i个总共<code>i/2+1</code>个。</li></ul><p>  以上可以统一为<code>(i+2)/2</code>。</p><p>  奇数同理。</p></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumOddLengthSubarrays</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> leftOdd = (i+<span class="number">2</span>)/<span class="number">2</span>,leftEven = (i+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> rightOdd = (arr.<span class="built_in">size</span>()-i+<span class="number">1</span>)/<span class="number">2</span>,rightEven=(arr.<span class="built_in">size</span>()-i)/<span class="number">2</span>;</span><br><span class="line">            s+=(leftOdd*rightOdd+leftEven*rightEven)*arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数组 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>233. 数字 1 的个数</title>
      <link href="/2021/08/13/233-%E6%95%B0%E5%AD%97-1-%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
      <url>/2021/08/13/233-%E6%95%B0%E5%AD%97-1-%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/number-of-digit-one/">233. 数字 1 的个数 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给定一个整数 <code>n</code>，计算所有小于等于 <code>n</code> 的非负整数中数字 <code>1</code> 出现的个数。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 13</span><br><span class="line">输出：6</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= n &lt;= 2 * 10^9</code></li></ul><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>是一个递推的问题。</p><h2 id="方法一：直接递推"><a href="#方法一：直接递推" class="headerlink" title="方法一：直接递推"></a>方法一：直接递推</h2><p>假设输入为 a*10^n^+b </p><p><strong>中间情况：</strong></p><p>只要递归：$$ f( a*10^n+b ) = f(b) + f ( a * 10^n-1 ) $$即可。</p><p><strong>边界条件：</strong> </p><p>$$ f(x)=\left{ \begin {aligned} &amp; 0,x&lt;1\&amp;1,1&lt;=x&lt;10 } \end {aligned} \right. $$</p><p>本方法会<strong>超时</strong></p><h2 id="方法二：避免重复计算"><a href="#方法二：避免重复计算" class="headerlink" title="方法二：避免重复计算"></a>方法二：避免重复计算</h2><p>$$a*10^n+b$$ 中，</p><ul><li><p>如果<code>a&gt;2</code>，在计算完<code>b</code>之后，需要计算a*10^n^-1。</p><p>  容易发现：</p><p>  当<code>a&gt;2</code> 的时候，在<code>2~a</code>之间由于最高位都不是1，因此都是计算10^n-1^，可以合并为计算一次10^n-1^，之后乘上<code>a-2</code> 倍。</p><p>  当<code>a==2</code>的时候，计算2*10^n-1^，即计算与$$a*10^n+b$$ 相同位数，不过最高为是1时候的总的1的个数。</p><p>  计算<code>a-2</code>个<code>b</code>可以合并为计算一个<code>b</code>之后乘上<code>a-2</code>，之后在计算2*10^n-1^即可。</p></li><li><p>如果<code>a==1</code>：</p><p>  数字为$$10^n+b$$ ，首先有<code>b+1</code>个数字至少包含一个1，也就是不小于$$10^n$$的部分最高位包含1的个数，之后递归计算<code>b</code>，算出来不小于10^n^部分包含的所有的1，在计算10^n^-1内的1的个数即可。</p></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countDigitOne</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">10</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> a = n,e=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(a/<span class="number">10</span>)&#123;</span><br><span class="line">            a/=<span class="number">10</span>;</span><br><span class="line">            e*=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> b = n - a*e;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">1</span>) <span class="keyword">return</span> b+<span class="number">1</span>+<span class="built_in">countDigitOne</span>(b)+<span class="built_in">countDigitOne</span>(e<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">countDigitOne</span>(b)+<span class="built_in">countDigitOne</span>(<span class="number">2</span>*e<span class="number">-1</span>)+(a<span class="number">-2</span>)*<span class="built_in">countDigitOne</span>(e<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.两数之和</title>
      <link href="/2021/08/13/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2021/08/13/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em>  的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong>nums = [2,7,11,15], target = 9<br><strong>输出：</strong>[0,1]<br><strong>解释：</strong>因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong>nums = [3,2,4], target = 6<br><strong>输出：</strong>[1,2]</p><p><strong>示例 3：</strong></p><p><strong>输入：</strong>nums = [3,3], target = 6<br><strong>输出：</strong>[0,1]</p><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li><li><strong>只会存在一个有效答案</strong></li></ul><p><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n2)</code> 的算法吗？</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>最简单的暴力，复杂度O(N^2)</li><li>使用Hash，复杂度O(NlogN)。使用unordered_map来实现已经logN级别的搜索。</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ol><li><p>暴力解法</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=nums.<span class="built_in">size</span>()<span class="number">-1</span>;j&gt;i;j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;i,j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>Hash解法</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">auto</span> f = m.<span class="built_in">find</span>(target-nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(f!=m.<span class="built_in">end</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="built_in">min</span>(i,f-&gt;second),<span class="built_in">max</span>(i,f-&gt;second)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            m[nums[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数学 </tag>
            
            <tag> 力扣简单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.两数相加</title>
      <link href="/2021/08/13/2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
      <url>/2021/08/13/2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg" alt=""></p><p><strong>输入：</strong>l1 = [2,4,3], l2 = [5,6,4]<br><strong>输出：</strong>[7,0,8]<br><strong>解释：</strong>342 + 465 = 807.</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong>l1 = [0], l2 = [0]<br><strong>输出：</strong>[0]</p><p><strong>示例 3：</strong></p><p><strong>输入：</strong>l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br><strong>输出：</strong>[8,9,9,9,0,0,0,1]</p><p><strong>提示：</strong></p><ul><li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>题目数据保证列表表示的数字不含前导零</li></ul><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>​    思路比较简单，就是从末尾开始相加，设置一个进位符op，循环结束条件为两个指针都为NULL并且进位符为0。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* head = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        ListNode* point = head;</span><br><span class="line">        <span class="keyword">int</span> op = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="literal">NULL</span>||l2!=<span class="literal">NULL</span>||op==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> v1 = l1==<span class="literal">NULL</span>?<span class="number">0</span>:l1-&gt;val;</span><br><span class="line">            <span class="keyword">int</span> v2 = l2==<span class="literal">NULL</span>?<span class="number">0</span>:l2-&gt;val;</span><br><span class="line">            <span class="keyword">int</span> v = v1 + v2 + op;</span><br><span class="line">            op = v / <span class="number">10</span>;</span><br><span class="line">            head-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(v%<span class="number">10</span>);</span><br><span class="line">            head=head-&gt;next;</span><br><span class="line">            l1 = l1==<span class="literal">NULL</span>?<span class="literal">NULL</span>:l1-&gt;next;</span><br><span class="line">            l2 = l2==<span class="literal">NULL</span>?<span class="literal">NULL</span>:l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> point-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数学 </tag>
            
            <tag> 力扣简单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>337.打家劫舍III</title>
      <link href="/2021/08/13/337-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%20III/"/>
      <url>/2021/08/13/337-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%20III/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。</p><p>计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p><p><strong>示例 1:</strong></p><p><strong>输入:</strong> [3,2,3,null,3,null,1]</p><pre><code> 3/ \\2   3\   \ 3   1</code></pre><p><strong>输出:</strong> 7<br><strong>解释:</strong> 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = <strong>7</strong>.</p><p><strong>示例 2:</strong></p><p><strong>输入:</strong> [3,4,5,1,3,null,1]</p><pre><code>     3    / \   4   5  / \   \ 1   3   1</code></pre><p><strong>输出:</strong> 9<br><strong>解释:</strong> 小偷一晚能够盗取的最高金额 = <strong>4</strong> + <strong>5</strong> = <strong>9</strong>.</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>dp真的不会啊，用了层次遍历。为了防止TLE用一个unordered_map来存储已经遍历过的节点,如果直接存在就使用，不存在则将当前的node算出以其为root的最大值，加入到map中。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;TreeNode*,<span class="keyword">int</span>&gt; m;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(TreeNode* node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(m.<span class="built_in">find</span>(node)!=m.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="keyword">return</span> m[node];</span><br><span class="line">        &#125;</span><br><span class="line">        m[node]=<span class="built_in">rob</span>(node);</span><br><span class="line">        <span class="keyword">return</span> m[node];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        m[root]=<span class="built_in">max</span>(<span class="built_in">get</span>(root-&gt;left)+<span class="built_in">get</span>(root-&gt;right),</span><br><span class="line">        root-&gt;val+</span><br><span class="line">        (root-&gt;left==<span class="literal">NULL</span>?<span class="number">0</span>:<span class="built_in">get</span>(root-&gt;left-&gt;left)+<span class="built_in">get</span>(root-&gt;left-&gt;right))+</span><br><span class="line">        (root-&gt;right==<span class="literal">NULL</span>?<span class="number">0</span>:<span class="built_in">get</span>(root-&gt;right-&gt;left)+<span class="built_in">get</span>(root-&gt;right-&gt;right)));</span><br><span class="line">        <span class="keyword">return</span> m[root];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>142. 环形链表 II</title>
      <link href="/2021/08/13/142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-II/"/>
      <url>/2021/08/13/142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-II/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。</p><p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意，<code>pos</code> 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</strong></p><p><strong>说明：</strong>不允许修改给定的链表。</p><p><strong>进阶：</strong></p><ul><li>  你是否可以使用 <code>O(1)</code> 空间解决此题？</li></ul><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png"></p><p><strong>输入：</strong>head = [3,2,0,-4], pos = 1<br><strong>输出：</strong>返回索引为 1 的链表节点<br><strong>解释：</strong>链表中有一个环，其尾部连接到第二个节点。</p><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png"></p><p><strong>输入：</strong>head = [1,2], pos = 0<br><strong>输出：</strong>返回索引为 0 的链表节点<br><strong>解释：</strong>链表中有一个环，其尾部连接到第一个节点。</p><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png"></p><p><strong>输入：</strong>head = [1], pos = -1<br><strong>输出：</strong>返回 null<br><strong>解释：</strong>链表中没有环。</p><p><strong>提示：</strong></p><ul><li>  链表中节点的数目范围在范围 <code>[0, 104]</code> 内</li><li>  <code>-105 &lt;= Node.val &lt;= 105</code></li><li>  <code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li></ul><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>就是暴力<br>1.先通过两个从头开始的指针，一个一次走一步，一个一次走两步，看两者能不能相遇，以此来确定有没有环，如果没有环直接返回NULL，有环则记录下两个指针相等的位置n1.<br>2.如果有环，那么环的头节点一定在head到n1之间，那么只需要再head和n1之间便利，从head往后一个一个开始，看看循环1~2圈只能能不能回到起始节点，如果可以那么证明事头节点，如果不行就往后。直到找到。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* n1,*n2;</span><br><span class="line">        n1=head;</span><br><span class="line">        n2=head-&gt;next;</span><br><span class="line">        <span class="comment">// if(n1==NULL||n2==NULL||n2-&gt;next==NULL) return NULL;</span></span><br><span class="line">        <span class="keyword">while</span>(n1!=n2)&#123;</span><br><span class="line">            <span class="comment">// printf(&quot;n1:%d n2:%d\n&quot;,n1-&gt;val,n2-&gt;val);</span></span><br><span class="line">            <span class="keyword">if</span>(n2==<span class="literal">NULL</span>||n2-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            n2=n2-&gt;next-&gt;next;</span><br><span class="line">            n1=n1-&gt;next;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//再head和n1之间存在环，从一个节点开始，到n1结束</span></span><br><span class="line">        ListNode* h=head;</span><br><span class="line">        <span class="comment">//h肯定在h~n1之间，看h到n1之前的节点是不是一样，前面有就在前面，前面没有就是n1</span></span><br><span class="line">        <span class="keyword">while</span>(h!=n1)&#123;</span><br><span class="line">            <span class="keyword">bool</span> finded=<span class="literal">false</span>;</span><br><span class="line">            ListNode* ch=h-&gt;next;</span><br><span class="line">            <span class="keyword">while</span>(ch!=h)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ch==n1)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(finded)&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        finded=<span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ch=ch-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ch==h) <span class="keyword">return</span> h;</span><br><span class="line">            <span class="keyword">else</span> h=h-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 链表 </tag>
            
            <tag> 环形链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>216.排列组合 III</title>
      <link href="/2021/08/13/216-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C%20III/"/>
      <url>/2021/08/13/216-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C%20III/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>找出所有相加之和为 <strong><em>n</em></strong> 的 <strong><em>k </em></strong>个数的组合<strong><em>。</em></strong>组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。</p><p><strong>说明：</strong></p><ul><li>所有数字都是正整数。</li><li>解集不能包含重复的组合。</li></ul><p><strong>示例 1:</strong></p><p><strong>输入:</strong> <strong><em>k</em></strong> = 3, <strong><em>n</em></strong> = 7<br><strong>输出:</strong> [[1,2,4]]</p><p><strong>示例 2:</strong></p><p><strong>输入:</strong> <strong><em>k</em></strong> = 3, <strong><em>n</em></strong> = 9<br><strong>输出:</strong> [[1,2,6], [1,3,5], [2,3,4]]</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>别无他长，用暴力吧。<br>从1-9进行遍历，每次遍历从当前遍历到的元素的下一个开始，然后k-1，n-i传入到下次遍历之中。当k=1并且n比当前遍历的元素大而且比9小的时候，返回这个vector<vector<int>&gt;。<br>上层遍历拿到返回的vector<vector<int>&gt;之后，把本层遍历的元素放到首位，然然后加入到自己的结果队列之中。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">combinationSum3</span>(<span class="keyword">int</span> k, <span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getsum</span>(<span class="number">1</span>,k,n);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">getsum</span>(<span class="keyword">int</span> s,<span class="keyword">int</span> k,<span class="keyword">int</span> n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;=<span class="number">0</span>||k&gt;n||s&gt;n) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;=s&amp;&amp;k==<span class="number">1</span>&amp;&amp;n&lt;=<span class="number">9</span>) <span class="keyword">return</span> &#123;&#123;n&#125;&#125;;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=s;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; temp=<span class="built_in">getsum</span>(i+<span class="number">1</span>,k<span class="number">-1</span>,n-i);</span><br><span class="line">            <span class="keyword">for</span>(vector&lt;<span class="keyword">int</span>&gt; t:temp)&#123;</span><br><span class="line">                t.<span class="built_in">insert</span>(t.<span class="built_in">begin</span>(),i);</span><br><span class="line">                v.<span class="built_in">push_back</span>(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 排列组合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数学 </tag>
            
            <tag> 排列组合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>92. 反转链表 II</title>
      <link href="/2021/08/13/92-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8-II/"/>
      <url>/2021/08/13/92-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8-II/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你单链表的头指针 <code>head</code> 和两个整数 <code>left</code> 和 <code>right</code> ，其中 <code>left &lt;= right</code> 。请你反转从位置 <code>left</code> 到位置 <code>right</code> 的链表节点，返回 <strong>反转后的链表</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg"></p><p><strong>输入：</strong>head = [1,2,3,4,5], left = 2, right = 4<br><strong>输出：</strong>[1,4,3,2,5]</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong>head = [5], left = 1, right = 1<br><strong>输出：</strong>[5]</p><p><strong>提示：</strong></p><ul><li>  链表中节点数目为 <code>n</code></li><li>  <code>1 &lt;= n &lt;= 500</code></li><li>  <code>-500 &lt;= Node.val &lt;= 500</code></li><li>  <code>1 &lt;= left &lt;= right &lt;= n</code></li></ul><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>首先找到第一个开始的反转节点<br>反转一个链表须要三个半节点：反转链表的第一个（算半个）pre-&gt;next，反转链表过程中的第一个head，反转链表过程中未反转部分的第一个nxt，反转链表未反转部分的第二个aft。<br>每次让nxt的next只想head，之后head变为nxt，这样即实现了一个节点反转到头节点的过程。之后nxt转为未反转部分的第一个，也即原来的aft，aft后移。<br>全部移动完成后，须要将原来反转链表的第一个pre-&gt;next的next设置为nxt，以此实现反转后的尾节点与后续节点链接。之后pre的next节点设置为反转后的第一个节点head。返回第一个节点即可。<br>为了方便返回第一个节点，这里在头节点前插入新节点。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m==n) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">        ListNode* pre = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        pre-&gt;next = head;</span><br><span class="line">        ListNode* h = pre;</span><br><span class="line">        <span class="keyword">while</span>(cnt&lt;m)&#123;</span><br><span class="line">            pre=head;</span><br><span class="line">            head=head-&gt;next;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* nxt=head-&gt;next,*aft=head-&gt;next-&gt;next,*lst = head;</span><br><span class="line">        <span class="keyword">while</span>(cnt&lt;n)&#123;</span><br><span class="line">            nxt-&gt;next = head;</span><br><span class="line">            head=nxt;</span><br><span class="line">            nxt=aft;</span><br><span class="line">            <span class="keyword">if</span>(aft)aft=aft-&gt;next;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        pre-&gt;next-&gt;next = nxt;</span><br><span class="line">        pre-&gt;next = head;</span><br><span class="line">        <span class="keyword">return</span> h-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>516.最长回文子序列</title>
      <link href="/2021/08/13/516-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>/2021/08/13/516-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/">516. 最长回文子序列 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>给你一个字符串 <code>s</code> ，找出其中最长的回文子序列，并返回该序列的长度。</p><p>子序列定义为：不改变剩余字符顺序的情况下，删除某些字符或者不删除任何字符形成的一个序列.</p><p><strong>实例1:</strong></p><p>输入：s = “bbbab”<br>        输出：4<br>        解释：一个可能的最长回文子序列为 “bbbb” 。</p><p><strong>示例 2：</strong></p><p>输入：s = “cbbd”<br>        输出：2<br>        解释：一个可能的最长回文子序列为 “bb” 。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li><p>马拉车</p><p>  马拉车算法用来解决最长回文字串的问题是最先想到的思路，但是本地比较特殊的一点在于，可以删除。如果分别删除，复杂度会太大，因此排除使用马拉车算法的思路。</p></li><li><p>动态规划</p><p>  设置数组<code>dp</code>，<code>dp[i][j]</code>代表从<code>s[i]</code> 到<code>s[j] </code>的最长回文字串长度。</p><p>  <strong>初始状态：</strong> <code>dp[i][i]=1</code> </p><p>  <strong>中间状态：</strong>对于任意<code>i,j 0&lt;=i&lt;j&lt;n</code>，其中任意字串的长度都已经通过循环获得。这里让<code>j</code>从0开始循环的，因此<code>0~j-1</code>内的所有字串的最大回文长度都已经知道，从<code>0~j</code>相当于在此基础上在最后一位上加上了<code>s[j]</code>。令<code>i</code>从<code>j-1</code>开始向<code>0 </code>循环，这样整体的长度才是从小往大：</p><ul><li><p>如果<code>s[i]==s[j]</code>，那么就是<code>i+1~j-1</code>内最大的回文字串长度加上2：</p>  <center><code>dp[i][j]=dp[i+1][j-1]+2</code></center>如果`s[i]==s[j]`但是`dp[i+1][j-1]`并不是从`i+1`开始到`j-1`结束的回文字串呢？没有关系，中间的可以都删除，因此只需要保存最长的长度即可。  </li></ul></li><li><p>如果<code>s[i]!=s[j]</code>，那么只需要<code>dp[i][j]</code>设置为<code>i~j-1</code>和<code>i+1~j</code>中的最长回文字串长度即可：</p>  <center><code>dp[i][j]=max(dp[i][j-1],dp[i+1][j])</code></center></li></ul><p>由于是从头往后开始遍历的，因此遍历到<code>i</code>的时候再将<code>dp[i][j]</code>设置为<code>1</code>即可。</p><p><strong>结果：</strong><code> dp[i][j]</code>代表从<code>s[i]</code> 到<code>s[j] </code>的最长回文字串长度。因此<code>s</code>从<code>0</code>到<code>n-1</code>的最长回文字串长度就是<code>dp[0][n-1]</code>。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestPalindromeSubseq</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">int</span> dp[n][n];</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)*n*n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            dp[i][i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i]==s[j])&#123;</span><br><span class="line">                    dp[j][i] = dp[j+<span class="number">1</span>][i<span class="number">-1</span>]+<span class="number">2</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[j][i] = <span class="built_in">max</span>(dp[j][i<span class="number">-1</span>],dp[j+<span class="number">1</span>][i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
